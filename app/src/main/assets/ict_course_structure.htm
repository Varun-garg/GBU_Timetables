<!DOCTYPE html>
<html idmmzcc-ext-docid="2062893713408" lang="en-US"><head>
  <meta charset="UTF-8">
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Markdown Edit</title>
  <link rel="stylesheet" href="Markdown%20Edit_files/normalize.htm">
  <link rel="stylesheet" href="Markdown%20Edit_files/github-style.css">
  <link rel="stylesheet" href="Markdown%20Edit_files/github.htm">
  <style type="text/css">
    body {
      margin:20px 30px;
    }
  </style>
<link id="htmlStyle" rel="stylesheet" href="Markdown%20Edit_files/base16-dark.css"></head>
<body>
<script>
  document.body.onload = function(){
    var style = opener.document.getElementById("htmlStyle");
    var clone = style.cloneNode(true);
    document.head.appendChild(clone);

    var src = opener.document.getElementById("out");
    var clonenode = src.cloneNode(true);
    document.body.appendChild(clonenode);
  };
</script>

<div style="display: block;" id="out" class="markdown-body display-none"><h2 id="semester-i">SEMESTER I</h2>
<table>
<thead>
<tr>
<th><strong>Sr. No.</strong></th>
<th><strong>Courses Code Courses</strong></th>
<th><strong>L-T-P Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>CY101 / PH102</td>
<td>Engineering Chemistry / Engineering Physics</td>
</tr>
<tr>
<td>2</td>
<td>MA101</td>
<td>Mathematics – I</td>
</tr>
<tr>
<td>3</td>
<td>CE101</td>
<td>Engineering Mechanics</td>
</tr>
<tr>
<td>4</td>
<td>CS101</td>
<td>Computer Programming – I</td>
</tr>
<tr>
<td>5</td>
<td>EC101 / EE102</td>
<td>Basic Electronics / Electrical Technology</td>
</tr>
<tr>
<td>6</td>
<td>HU101</td>
<td>English Proficiency</td>
</tr>
<tr>
<td>7</td>
<td>SS101</td>
<td>Human Values &amp; Buddhist Ethics</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>CY103 / PH104</td>
<td>Engg. Chemistry Lab / Engg. Physics Lab</td>
</tr>
<tr>
<td>9</td>
<td>CE103</td>
<td>Engineering Graphics Lab</td>
</tr>
<tr>
<td>10</td>
<td>CS181</td>
<td>Computer Programming Lab - I</td>
</tr>
<tr>
<td>11</td>
<td>EC181 / EE104</td>
<td>Basic Electronics Lab / Electrical Technology Lab</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>GP101</td>
<td>General Proficiency</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>26</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>16-3-19 = 29</strong></td>
</tr>
</tbody>
</table>
<h2 id="semester-ii">SEMESTER II</h2>
<table>
<thead>
<tr>
<th><strong>Sr. No.</strong></th>
<th><strong>Courses Code</strong></th>
<th><strong>Courses</strong></th>
<th><strong>L-T-P</strong></th>
<th><strong>Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>PH102 / CY101</td>
<td>Engineering Physics/ Engineering Chemistry</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>2</td>
<td>MA102</td>
<td>Mathematics – II</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>CE106</td>
<td>Ecology and Environment</td>
<td>2-1-0</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>CS102</td>
<td>Computer Programming – II</td>
<td>2-0-0</td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td>EE102 / EC101</td>
<td>Electrical Technology / Basic Electronics</td>
<td>2-0-0</td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td>HU102</td>
<td>Professional Communication</td>
<td>2-0-0</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>SS102</td>
<td>History of Science &amp; Technology</td>
<td>2-0-0</td>
<td>2</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>PH104 / CY103</td>
<td>Engg. Physics Lab/ Engg. Chemistry Lab</td>
<td>0-0-2</td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td>CS182</td>
<td>Computer Programming Lab - II</td>
<td>0-0-3</td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td>EE104 / EC181</td>
<td>Electrical Technology Lab/ Basic Electronics Lab</td>
<td>0-0-2</td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td>ME102</td>
<td>Workshop Practices</td>
<td>0-0-3</td>
<td>2</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>GP102</td>
<td>General Proficiency</td>
<td>------</td>
<td>1</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>26</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>16-3-10 = 29</strong></td>
</tr>
</tbody>
</table>
<h2 id="-semester-iii-"><strong>SEMESTER – III</strong></h2>
<table>
<thead>
<tr>
<th><strong>Sr. No.</strong></th>
<th><strong>Courses Code Courses</strong></th>
<th><strong>L-T-P Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MA201</td>
<td>Quantitative Techniques</td>
</tr>
<tr>
<td>2</td>
<td>EC201 / EC431</td>
<td>Digital Electronics</td>
</tr>
<tr>
<td>3</td>
<td>CS201</td>
<td>Internet Technology</td>
</tr>
<tr>
<td>4</td>
<td>CS203 / CS431</td>
<td>Operating Systems</td>
</tr>
<tr>
<td>5</td>
<td>CS205</td>
<td>Data Structure &amp; Algorithms</td>
</tr>
<tr>
<td>6</td>
<td>CS207</td>
<td>System Analysis and Design</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>EC281 / EC483</td>
<td>Digital Electronics Lab</td>
</tr>
<tr>
<td>8</td>
<td>CS281</td>
<td>Internet Technology Lab</td>
</tr>
<tr>
<td>9</td>
<td>CS283</td>
<td>Data Structure and Algorithms Lab</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>GP201</td>
<td>General Proficiency</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>26</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>17-2-9 = 28</strong></td>
</tr>
</tbody>
</table>
<h2 id="-semester-iv-"><strong>SEMESTER – IV</strong></h2>
<table>
<thead>
<tr>
<th><strong>Sr. No. Courses Code Courses</strong></th>
<th><strong>L-T-P Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MA202</td>
</tr>
<tr>
<td>2</td>
<td>EC210</td>
</tr>
<tr>
<td>3</td>
<td>CS202 / CS433</td>
</tr>
<tr>
<td>4</td>
<td>CS204</td>
</tr>
<tr>
<td>5</td>
<td>CS206 / CS436</td>
</tr>
<tr>
<td>6</td>
<td>CS208</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>EC282</td>
</tr>
<tr>
<td>8</td>
<td>CS282</td>
</tr>
<tr>
<td>9</td>
<td>CS284</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>GP202</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>26</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>16-3-9 = 28</strong></td>
</tr>
</tbody>
</table>
<h2 id="-semester-v-"><strong>SEMESTER – V</strong></h2>
<table>
<thead>
<tr>
<th><strong>Sr. No. Courses Code Courses</strong></th>
<th><strong>L-T-P Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>CS301</td>
</tr>
<tr>
<td>2</td>
<td>CS303</td>
</tr>
<tr>
<td>3</td>
<td>CS305</td>
</tr>
<tr>
<td>4</td>
<td>CS307</td>
</tr>
<tr>
<td>5</td>
<td>CS309 / CS438</td>
</tr>
<tr>
<td>6</td>
<td>ME311</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>CS381</td>
</tr>
<tr>
<td>8</td>
<td>CS383</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>GP301</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>17-4-6 = 27</strong></td>
</tr>
</tbody>
</table>
<h2 id="-semester-vi-"><strong>SEMESTER – VI</strong></h2>
<table>
<thead>
<tr>
<th><strong>Sr. No.</strong></th>
<th><strong>Courses Code</strong></th>
<th><strong>Courses</strong></th>
<th><strong>L-T-P</strong></th>
<th><strong>Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>CS302</td>
<td>Distributed Operating System</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>2</td>
<td>CS304</td>
<td>Concepts of Artificial Intelligence</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>CS306</td>
<td>Advanced Computer Architecture</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td>CS308</td>
<td>Computer Networks</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>EC304 / EC559</td>
<td>Microprocessor and Interfacing</td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td>ME312</td>
<td>Entrepreneurship &amp; Innovation</td>
<td>2-0-0</td>
<td>2</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>EC384/EC587</td>
<td>Microprocessor and Interfacing Lab</td>
<td>0-0-3</td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td>CS382</td>
<td>Computer Networks Lab</td>
<td>0-0-3</td>
<td>2</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>GP302</td>
<td>General Proficiency</td>
<td>------</td>
<td>1</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>26</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>17-4-6 = 27</strong></td>
</tr>
</tbody>
</table>
<h2 id="-semester-vii-"><strong>SEMESTER – VII</strong></h2>
<table>
<thead>
<tr>
<th><strong>Sr. No.</strong></th>
<th><strong>Courses Code</strong></th>
<th><strong>Courses</strong></th>
<th><strong>L-T-P</strong></th>
<th><strong>Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>SS401</td>
<td>Social Aspects of Engineering</td>
<td>2-1-0</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>CS401</td>
<td>Compiler Design</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>CS403</td>
<td>Object-Oriented Analysis</td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>CS405</td>
<td>Formal Methods</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td></td>
<td><strong>Elective – 1</strong></td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>CS481</td>
<td>Compiler Design Lab</td>
<td>0-0-3</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>CS491</td>
<td>Seminar</td>
<td>0-0-2</td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td>CS493</td>
<td>Minor Project</td>
<td>0-0-8</td>
<td>4</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>GP401</td>
<td>General Proficiency</td>
<td>------</td>
<td>1</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>26</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>14-3-13 = 30</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th><strong>Electives – 1</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Sr. No.</strong></td>
<td><strong>Courses Code</strong></td>
<td><strong>Courses</strong></td>
</tr>
<tr>
<td>1</td>
<td>CS441 / CS541</td>
<td>Software Project Management</td>
</tr>
<tr>
<td>2</td>
<td>CS443 / CS543</td>
<td>Object-Oriented Software Engineering</td>
</tr>
<tr>
<td>3</td>
<td>CS445 / CS545</td>
<td>Information Security</td>
</tr>
<tr>
<td>4</td>
<td>CS447 / CS547</td>
<td>Multimedia Techniques</td>
</tr>
<tr>
<td>5</td>
<td>CS449 / CS561</td>
<td>Soft Computing</td>
</tr>
<tr>
<td>6</td>
<td>CS451 / CS551</td>
<td>Natural Language Processing</td>
</tr>
<tr>
<td>7</td>
<td>CS457 / CS557</td>
<td>Machine Translation and Learning</td>
</tr>
<tr>
<td>8</td>
<td>EC542</td>
<td>Quality of Services in Networks</td>
</tr>
<tr>
<td>9</td>
<td>EC447</td>
<td>Digital Image Processing</td>
</tr>
<tr>
<td>10</td>
<td>EC465 / EC555</td>
<td>Principles of VLSI Design</td>
</tr>
<tr>
<td>11</td>
<td>EC441</td>
<td>Design with Microcontrollers</td>
</tr>
<tr>
<td>12</td>
<td>EC564</td>
<td>Wireless Technologies</td>
</tr>
</tbody>
</table>
<h2 id="-semester-viii-"><strong>SEMESTER VIII</strong></h2>
<table>
<thead>
<tr>
<th><strong>Sr. No.</strong></th>
<th><strong>Courses Code</strong></th>
<th><strong>Courses</strong></th>
<th><strong>L-T-P</strong></th>
<th><strong>Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MA402</td>
<td>Simulation &amp; Modeling</td>
<td>3-1-0</td>
<td>4</td>
</tr>
<tr>
<td>2</td>
<td>CS402 / CS532</td>
<td>Software Architecture and Design</td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>CS404 / CS534</td>
<td>Open Source Software Systems</td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td></td>
<td><strong>Elective-2</strong></td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td></td>
<td><strong>Elective-3</strong></td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>CS482 / CS582</td>
<td>Open Source Software Systems Lab</td>
<td>0-0-3</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>CS492 / CS592</td>
<td>Major Project</td>
<td>0-0-10</td>
<td>5</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>GP402 / GP532</td>
<td>General Proficiency</td>
<td>------</td>
<td>1</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>24</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>15-1-13 = 29</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th><strong>Electives ( 2 &amp; 3 )</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Sr. No.</strong></td>
<td><strong>Courses Code</strong></td>
<td><strong>Courses</strong></td>
</tr>
<tr>
<td>1</td>
<td>CS442 / CS542</td>
<td>Component-Based Software Engineering</td>
</tr>
<tr>
<td>2</td>
<td>CS444 / CS544</td>
<td>Aspect-Oriented Software Engineering</td>
</tr>
<tr>
<td>3</td>
<td>CS446 / CS546</td>
<td>Software Re-Engineering</td>
</tr>
<tr>
<td>4</td>
<td>CS448 / CS548</td>
<td>Software Reusability</td>
</tr>
<tr>
<td>5</td>
<td>CS450 / CS550</td>
<td>Web-Based Software Engineering</td>
</tr>
<tr>
<td>6</td>
<td>CS452 / CS552</td>
<td>Software Agents</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Summer Semester ( After 8<sup>th</sup> Semester )</strong></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Sr. No.</strong></td>
<td><strong>Courses Code</strong></td>
</tr>
<tr>
<td>1</td>
<td>CS490</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>10</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td>0-0-20 = <strong>20</strong></td>
</tr>
</tbody>
</table>
<h2 id="-semester-ix-"><strong>SEMESTER IX</strong></h2>
<table>
<thead>
<tr>
<th><strong>Sr. No.</strong></th>
<th><strong>Courses Code</strong></th>
<th><strong>Courses</strong></th>
<th><strong>L-T-P</strong></th>
<th><strong>Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>CS501 / CS631</td>
<td>Software Testing</td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>CS503 / CS633</td>
<td>Research Techniques in ICT</td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td><strong>Electives – 4</strong></td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td></td>
<td><strong>Electives – 5</strong></td>
<td>3-0-0</td>
<td>3</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>CS581 / CS681</td>
<td>Software Testing Lab</td>
<td>0-0-3</td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td>CS591 / CS691</td>
<td>Dissertation Part - I</td>
<td>0-0-14</td>
<td>7</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>GP501 / GP631</td>
<td>General Proficiency</td>
<td>------</td>
<td>1</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>22</strong></td>
</tr>
<tr>
<td><strong>Total Contact Hours</strong></td>
<td><strong>12-0-17 = 29</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th><strong>Electives ( 4 &amp; 5 )</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Sr. No.</strong></td>
<td><strong>Courses Code</strong></td>
<td><strong>Courses</strong></td>
</tr>
<tr>
<td>1</td>
<td>CS545 / CS641</td>
<td>Software Measurement and Estimation</td>
</tr>
<tr>
<td>2</td>
<td>CS547 / CS643</td>
<td>Software Reliability and Fault Tolerant Systems</td>
</tr>
<tr>
<td>3</td>
<td>CS549 / CS645</td>
<td>Software Quality Assurance and Engineering</td>
</tr>
<tr>
<td>4</td>
<td>CS553 / CS647</td>
<td>Software Maintenance</td>
</tr>
<tr>
<td>5</td>
<td>CS555 / CS649</td>
<td>Software Performance</td>
</tr>
</tbody>
</table>
<h2 id="-semester-x-"><strong>SEMESTER X</strong></h2>
<table>
<thead>
<tr>
<th><strong>Sr. No.</strong></th>
<th><strong>Courses Code</strong></th>
<th><strong>Courses</strong></th>
<th><strong>L-T-P</strong></th>
<th><strong>Credits</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>CS590 / CS690</td>
<td>Dissertation Part – II</td>
<td>------</td>
<td>21</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>GP502 / GP632</td>
<td>General Proficiency</td>
<td>------</td>
<td>1</td>
</tr>
<tr>
<td><strong>Total Credits</strong></td>
<td><strong>22</strong></td>
</tr>
</tbody>
</table>
<p><strong>GRAND TOTAL CREDITS = 260</strong></p>
<h2 id="-semester-i-"><strong>(SEMESTER - I)</strong></h2>
<h1 id="-computer-programming-i-"><em>COMPUTER PROGRAMMING – I</em></h1>
<h2 id="unit-i-introduction-to-computer">UNIT I INTRODUCTION TO COMPUTER</h2>
<p>Definition, characteristic, generation of computers, basic components
 of a computer system, memory, input, output and storage units, hard 
copy devices, high level language and low level language, software, 
system software, application software, hardware, firmware, compiler, 
interpreter and assembler.</p>
<h2 id="unit-ii-introduction-to-programming-concept">UNIT II INTRODUCTION TO PROGRAMMING CONCEPT</h2>
<p>Introduction to algorithm and flow chart; representation of algorithm
 using flow chart symbol, pseudo code, basic algorithm design, 
characteristics of good algorithm, development of algorithm.</p>
<h2 id="unit-iii-introduction-to-c-programming-language">UNIT III INTRODUCTION TO C PROGRAMMING LANGUAGE</h2>
<p><a href="http://gd.tuwien.ac.at/languages/c/programming-bbrown/c_006.htm">declaring variables,</a> <a href="http://gd.tuwien.ac.at/languages/c/programming-bbrown/c_010.htm">preprocessor statements,</a> <a href="http://gd.tuwien.ac.at/languages/c/programming-bbrown/c_013.htm">arithmetic operators,</a> <a href="http://gd.tuwien.ac.at/languages/c/programming-bbrown/c_015a.htm">programming style,</a> <a href="http://gd.tuwien.ac.at/languages/c/programming-bbrown/c_016.htm">keyboard input</a> , <a href="http://gd.tuwien.ac.at/languages/c/programming-bbrown/c_018.htm">relational operators,</a>
 introduction, feature of C language, concepts, uses, basic program 
structure, simple data types, variables, constants, operators, comments,
 control flow statement :if, while, for, do-while, switch .</p>
<h2 id="unit-iv">UNIT IV</h2>
<p>User defined data types, arrays, declaration and operations on 
arrays, structure, member accessing, structure and union, array of 
structures, functions, declaration and use of functions, parameter 
passing, dynamic memory allocation.</p>
<h2 id="unit-v-fundamentals-of-pointers">UNIT V FUNDAMENTALS OF POINTERS</h2>
<p>Declaration and usages of pointers, operations that can be performed 
on computers, use of pointers in programming exercises, parameter 
passing in pointers, call by value, call by references, Introduction to 
LINUX: LINUX structure, directory, LINUX commands.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>C Programming, Herbert Shield</p>
</li>
<li><p>Programming in ANSI C by E. Balagurusamy, Tata Mgraw Hill,</p>
</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p><a href="http://www.flipkart.com/programming-language-2nd-brian-kernighan-book-8131704947">C Programming Language 2nd Edition by Brian, W Kernighan Pearson Education.</a></p>
</li>
<li><p><a href="http://www.flipkart.com/puzzle-book-alan-feuer-puzzles-book-0131155024">C. Puzzle Book: Puzzles For The C. Programming Language by Alan R Feuer Prentice Hall- Gale </a></p>
</li>
<li><p><a href="http://www.flipkart.com/expert-programming-peter-van-der-book-8131715094">Expert C Programming: Deep C Secrets (s) by Peter Van Der Linden Dorling Kindersley India</a>.</p>
</li>
<li><p>Introduction To UNIX System by Morgan Rachel Tata Mcgraw Hill Education.</p>
</li>
<li><p>C: A Reference Manual (5th Edition) by <a href="http://www.amazon.com/Samuel-P.-Harbison/e/B000AQ3UGK/ref=ntt_athr_dp_pel_1">Samuel P. Harbison</a> &amp;Samuel P. Harbison.</p>
</li>
<li><p>Programming Using the C Language by Hutchison,R.C, Mcgraw Hill Book Company, New York</p>
</li>
</ol>
<h1 id="-computer-programming-lab-i-"><em>COMPUTER PROGRAMMING LAB – I</em></h1>
<p><strong>EXPERIMENTS:</strong></p>
<ol>
<li><p>Write a C program to reverse a given number, find the sum of digits of the number.</p>
</li>
<li><p>Write a C program to concatenate two strings.</p>
</li>
<li><p>Write a C program to take marks of a student as input and print 
the his/her grade bases on following criteria using if – else statements</p>
</li>
</ol>
<p>Marks &lt;40 FAIL</p>
<p>40&lt;= Marks &lt;59 GOOD</p>
<p>59 &lt;= Marks &lt; 80 Excellent</p>
<p>80 &lt;= Marks Outstanding</p>
<ol>
<li><p>Perform experiment 3 using switch case statement.</p>
</li>
<li><p>Write a C program to compute the length of a string using while loop.</p>
</li>
<li><p>Write a C program to convert all the lowercase letter to 
uppercase letter and all uppercase letters to lower case letter given a 
string as input.</p>
</li>
<li><p>Write a C program to compute the roots of a quadratic equation.</p>
</li>
<li><p>Write a C program to check whether a given number is prime or not, also check whether it is divisible by a number k or not.</p>
</li>
<li><p>Write a C program to check whether a given year is leap year or not.</p>
</li>
<li><p>Write a C program to take two matrixes as input and print the sum of two matrixes.</p>
</li>
<li><p>Write a C program to display the address of a variable using pointer.</p>
</li>
<li><p>Write a C program to compute the length of a string using pointer.</p>
</li>
<li><p>Create a structure called STUDENT having name, registration 
number, class, session as its field. Compute the size of structure 
STUDENT.</p>
</li>
<li><p>Write a C program to check weather a given string is palindrome or not.</p>
</li>
<li><p>Write a C program to generate following patterns.</p>
</li>
</ol>
<p>1 2 2</p>
<ol>
<li><p>3 3</p>
</li>
<li><p>4 4 4</p>
</li>
</ol>
<p>A</p>
<p>B B</p>
<table>
<thead>
<tr>
<th>C</th>
<th>C</th>
<th>C</th>
</tr>
</thead>
<tbody>
<tr>
<td>D D</td>
<td>D</td>
<td>D</td>
</tr>
</tbody>
</table>
<h1 id="-basic-electronics-lab-"><em>BASIC ELECTRONICS LAB</em></h1>
<h2 id="list-of-experiments">List of Experiments</h2>
<ol>
<li><p>Study of Multimeter and Function Generator /Counter.</p>
</li>
<li><p>Study of Cathode-Ray Oscilloscope.</p>
</li>
<li><p>To calculate the Equivalent Resistance of the Series and parallel resistive network.</p>
</li>
<li><p>To calculate the Equivalent Capacitance of the Series and parallel capacitive network.</p>
</li>
<li><p>To Plot the V-I Characteristics of P-N Junction Diode in forward bias and reverse bias.</p>
</li>
<li><p>To study the working of a P-N Junction Diode as a switch.</p>
</li>
<li><p>To plot the V-I Characteristics of a Zener Diode.</p>
</li>
<li><p>To plot the input and output waveforms of clipper circuits.</p>
</li>
<li><p>Study the Half wave rectifier.</p>
</li>
<li><p>Study of Full wave Bridge Rectifier.</p>
</li>
<li><p>Study of Centre Tapped Full Wave Rectifier.</p>
</li>
<li><p>To plot the input and output characteristic of transistor‟s Common Base configuration.</p>
</li>
<li><p>To plot the input and output characteristic of transistor‟s Common Emitter configuration.</p>
</li>
<li><p>To plot the input and output characteristic of transistor‟s Common Collector configuration.</p>
</li>
<li><p>To verify the truth table of various logic gates.</p>
</li>
</ol>
<h1 id="-semester-ii-">(SEMESTER - II)</h1>
<h1 id="-computer-programming-ii-"><em>COMPUTER PROGRAMMING – II</em></h1>
<h2 id="unit-i-object-oriented-programming">UNIT I OBJECT-ORIENTED PROGRAMMING</h2>
<p>Concept of object-oriented programming (OOP), benefits of OOP, 
application of OOP, Java history, Java features, Java streaming, Java 
and Internet, Java contribution to Internet: Java applets, security, 
portability; Java environment, Java library, Java program structure, 
Java program, Java Virtual Machine (JVM) architecture, Just In Time 
compiler (JIT), data type, variables and arrays, operators, control 
statements, object-oriented paradigms; abstraction, encapsulation, 
inheritance, polymorphism, Java class and OOP implementation</p>
<h2 id="unit-ii-data-type-operators-and-control-statement">UNIT II DATA TYPE, OPERATORS AND CONTROL STATEMENT</h2>
<p>Data types, Java key words, identifiers, constants, variables, 
declaration and scope of the variable, symbolic constant, type casting, 
arithmetic operator, relational operator, logical operator, assignment 
operator, increment and decrement operator, conditional operator, 
bitwise operator, ?: operator, arithmetic expressions, expressions, type
 conversions in expressions, mathematical functions, more data types: 
arrays, strings, vectors, wrappers classes, program control statements: 
decision making and branching: if, if….else, else….if, else if ladder, 
switch, decision making and looping: while, do….while, for.</p>
<h2 id="unit-iii-classes-objects-and-methods">UNIT III CLASSES, OBJECTS AND METHODS</h2>
<p>Java class libraries, class fundamentals, object, methods, adding 
variables, add methods, creating objects, accessing class members, 
constructors, methods overloading, static members, nesting of methods, 
inheritance: extending a class, overriding methods, final variables and 
methods, final classes, finalizer methods, abstract methods and classes,
 visibility control, exception handling fundamental.</p>
<h2 id="unit-iv-interfaces-and-packages">UNIT IV INTERFACES AND PACKAGES</h2>
<p>Interfaces, extending interfaces, implementing interfaces, interfaces
 references, accessing interface variable, creating queue interface, 
variable in interfaces, packages, finding a packages and classpath, 
package and member access, Java API package, system package, naming 
conventions, creating package, accessing a package, adding a class to a 
package, hiding classes,</p>
<h2 id="unit-v-multithreading-and-applet-programming">UNIT V MULTITHREADING AND APPLET PROGRAMMING</h2>
<p>Multithreading programming: creating threads, thread class and 
runnable interface extending the thread class, stopping and blocking a 
thread, life cycle of a thread, thread methods, thread exceptions, 
thread priority, synchronization, thread communication using notify(), 
wait(), and notify all(), applet programming : applet basic, applets 
architecture, a complete applet skeleton, building applets code, applets
 life cycle, creating a executable applet, designing a web page, applets
 tag, passing parameters to applets, applets and HTML.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Programming with JAVA, E. Balagurusawamy, Tata McGraw Hill, 1998.</p>
</li>
<li><p>JAVA Beginner‟s guide, Herbert Schildt, Tata McGraw Hill, 2007.</p>
</li>
<li><p>Java How to Program, Deitel &amp; Deitel, Prentice-Hall, 1999.</p>
</li>
<li><p>The Complete Reference JAVA 2, Herbert Schildt, 5<sup>th</sup> Edition, Tata McGraw Hill, 2002.</p>
</li>
<li><p>The Complete Reference JAVA 2, Herbert Schildt, 7<sup>th</sup> Edition, Tata McGraw Hill, 2009.</p>
</li>
<li><p>The Java Programming Language, Ken Arnold, James Gosling, Addison-Wesley, 1996.</p>
</li>
<li><p>How to Program Java, Peter Coffee, Ziff-Davis Press, 1996.</p>
</li>
</ol>
<h1 id="-computer-programming-ii-lab-"><em>COMPUTER PROGRAMMING-II LAB</em></h1>
<ol>
<li><p>Write a separate Java Code to implement each of the following: Class, Command Line Argument, how to enter value through keyboard</p>
</li>
<li><p>Write a separate Java Code to implement each of the following 
data types:Variable, Constant, Arrays, Strings, Vectors, Wrappers 
Classes, Type Casting</p>
</li>
<li><p>Write a separate Java Code to implement each of the following operators:</p>
</li>
</ol>
<p>Arithmetic operator, Relational operator, Logical operator, 
Assignment operator, Increment &amp; Decrement operator, Conditional 
operator, Bitwise operator, ?: operator</p>
<ol>
<li><p>Write a separate Java Code to implement each of the following 
control statements: Decision statement, Loops statement and Branch 
statements</p>
</li>
<li><p>Write a separate Java Code to implement each of the following sorting: Bubble Sort, Selection Sort, Insertion Sort, Merge Sort</p>
</li>
<li><p>Write a separate Java Code to implement each of the following: 
Class, Object, Constructors, Method, Method Overloading and Method 
Overriding</p>
</li>
<li><p>Write a separate Java Code to implement each of the following: 
Final variable, final class, final method, abstract class, abstract 
method and concrete method</p>
</li>
<li><p>Write a separate Java Code to implement each of the following 
OOPs concepts: Abstraction, Polymorphism, Encapsulation, Inheritance</p>
</li>
<li><p>Write a separate Java Code to implement each of the following: 
Exception handling with Try, Catch, Throw, Throws, Finally Multiple 
catch statement with the following exceptions : ArithmeticException, 
ArrayOutOfBoundsException and ArrayStoreException</p>
</li>
<li><p>Write a separate Java Code to implement each of the following: Visibility Controls: Private, Public and Protected</p>
</li>
<li><p>Write a separate Java Code to implement each of the following: Interface, extending and implementing interface</p>
</li>
<li><p>Write a separate Java Code to implement each of the following: 
Multithreading: Create thread with thread class and runnable interface, 
thread priorities, synchronization</p>
</li>
<li><p>Write a separate Java Code to implement each of the following: 
Packages : Create package A with following methods and import this 
package A into another Java program to show the result of methods of 
package A.</p>
</li>
</ol>
<p>i) First method: Factorial number with the help of recursion.
ii) Second method: Fibonacci Series
iii) Third Method: Generate first 10 prime numbers and show the sum of first 10 prime numbers.</p>
<ol>
<li>Write Java Code to generate the following output on applet with the 
help of two dimensional array and show the result with the help of HTML 
file.</li>
</ol>
<p>7 14 21 28 35 42 49 56 63 70 Sum = 385</p>
<p>5 10 15 20 25 30 35 40 45 50 Sum = 275</p>
<p>3 6 9 12 15 18 21 24 27 30 Sum = 165</p>
<ol>
<li>Write a Java Code to design the following web page with the help of applet and HTML.</li>
</ol>
<h1 id="-semester-iii-">(SEMESTER - III)</h1>
<h1 id="-quantitative-techniques-"><em>QUANTITATIVE TECHNIQUES</em></h1>
<h2 id="unit-i">UNIT-I</h2>
<p>Random Events, Independent and dependent events, axioms of the theory
 of probability, Simple and conditional probability, Bayes theorem.</p>
<h2 id="unit-ii">UNIT-II</h2>
<p>One dimensional random variables (discrete and continuous), 
distribution of a random variable (density function and cdf), 
Characteristic function of a random variable and its utility, Bivariate 
random variable, joint, marginal and conditional distributions, joint 
characteristic function, Moments, Moment Generating functions, Skewness,
 Kurtosis.</p>
<h2 id="unit-iii">UNIT-III</h2>
<p>Bernoulli, Binomial, Poisson, Geometric, Uniform, Exponential, 
Normal, Earlang, Weibull, Method of least squares (Fitting of straight 
lines, Polynomials, Exponential and logarithmic curves), covariance and 
correlation.</p>
<h2 id="unit-iv">UNIT-IV</h2>
<p>Sampling theory (small and large), Test of hypothesis and 
significance: Chi-square test, t-test, z-test, Ftest, Questionaire 
design.</p>
<h2 id="unit-v">UNIT-V</h2>
<p>Markov chain, Chapman- Kolmogorov Equation, Classification of states.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li>T. Veerarajan. Probability, Statistics and Random Processes, Tata McGraw-Hill.</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>V. K. Rohatgi: An Introduction to Probability Theory and Mathematical Statistics. John Wiley &amp; Sons 1976.</p>
</li>
<li><p>John Freund: Introduction to Probability. Dover Publications.</p>
</li>
<li><p>Marylees Miller, John E. Freund, Irwin Miller: John E. Freund's Mathematical Statistics: With Applications, Prentice Hall, 2003.</p>
</li>
<li><p>Levin and Rubin, Statistics for Management, Prentice Hall.</p>
</li>
</ol>
<h1 id="-digital-electronics-"><em>DIGITAL ELECTRONICS</em></h1>
<h2 id="unit-i">UNIT I</h2>
<p>Number systems &amp; codes, Binary arithmetic Boolean algebra and 
switching function. Minimization of switching function, concept of prime
 implecant etc. Karnaugh's map method, Quine &amp; McCluskey's method, 
cases with don't care terms and multiple outputs switching function. 
Logic gates, NAND, NOR realization of switching function; half-adder 
half-subtractor full-adders full-subtractor circuits. Series &amp; 
parallel addition and BCD adders, look-ahead carry generator.</p>
<h2 id="unit-ii">UNIT II</h2>
<p>Linear wave shaping circuits, Bistable, monostable &amp; astable 
multivibrators, Schmitt trigger circuits .Introduction to D/A 
converters. Various types of Analog to Digital &amp; Digital to Analog 
converters sample &amp; hold circuits and V-F converters.</p>
<h2 id="unit-iii">UNIT III</h2>
<p>Logic families: RTL, DTL, all types of TTL circuits, ECL, 12 L and 
PMOS, NMOS &amp; CMOS logic etc. Gated flip-flops and gated 
multivibrators etc; Interfacing between TTL to MOS, vice-versa.</p>
<h2 id="unit-iv">UNIT IV</h2>
<p>Introduction to shift registers / ring counters synchronous &amp; 
asynchronous counters and designing of combinational circuits like code 
converters &amp; counters etc.</p>
<h2 id="unit-v">UNIT V</h2>
<p>Semiconductor memories &amp; designing with ROM and PLA: Decoders Encoders multiplexers &amp; demultiplexers<strong>.</strong></p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>Tocci, "Digital Systems Principles &amp; Applications".</p>
</li>
<li><p>M. Mano, "Digital Logic &amp; Computer Design", (PHI).</p>
</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>John F. Wakerly, Digital Design: Principles &amp; Practices, Pearson Education.2003</p>
</li>
<li><p>Richard F.Tinder, Engineering Digital Design, 2/e, Harcourt India Private Ltd., 2001</p>
</li>
<li><p>William I. Fletcher, An Engineering Approach to Digital Design, Pearson Education</p>
</li>
<li><p>William H.Gothmann, Digital Electronics: An Introduction to 
Theory and Practice, Eastern Economy Edition, Prentice-Hall of India 
Private Limited, New Delhi. 2001.</p>
</li>
<li><p>Jacob Millman &amp; Herbert Taub,Pulse,Digitaland Switching 
Waveforms,13th Reprint,Tata McGraw Hill Publishing Company 
Ltd.,NewDelhi, 1999</p>
</li>
</ol>
<h1 id="-internet-technology-"><em>INTERNET TECHNOLOGY</em></h1>
<h2 id="unit-i-overview-of-internet-and-web">UNIT I OVERVIEW OF INTERNET AND WEB</h2>
<p>Introduction to internet, history of Internet and web, Internet 
services and accessibility, uses of internet, Internet standards, 
Internet protocols- IP, TCP,UDP and host names, web server, proxy 
server, fast ready connections on the web, web browsers, Netscape 
communication suite, Microsoft Internet explorer, firewalls, data 
security.</p>
<h2 id="unit-ii-web-design">UNIT II WEB DESIGN</h2>
<p>Key issues in web site design, introduction to HTML, SGML- DTD, DTD 
elements, attributes, outline of an HTML document, head section- 
prologue, link, base, meta, script, style, body section- headers, 
paragraphs, text formatting, linking, internal linking, embedding 
images, lists, tables, frames, other special tags and characters, XHTML,
 XML, structuring data, XML schema documents, document object model, 
security and management issues for creating a website.</p>
<h2 id="unit-iii-browsing-systems">UNIT III BROWSING SYSTEMS</h2>
<p>Searching and web casting technique, popular web servers, basic 
features, bookmarks, cookies, progress indicators, customization of 
browsers, browsing tricks, next generation web browsing, search engines,
 architecture of search engines, search tools, web crawlers, types of 
crawlers, scalable web crawler, incremental crawler, parallel crawler, 
focused crawler, agent based crawler, case study of IE, counters, 
Internet chat, hardware and software requirements for Internet and web 
based applications, Internet and web technologies.</p>
<h2 id="unit-iv-javascript">UNIT IV JAVASCRIPT</h2>
<p>Introduction, Language elements, objects of JavaScript, other objects like data, math, string, regular expressions, arrays.</p>
<h2 id="unit-v-active-server-pages">UNIT V ACTIVE SERVER PAGES</h2>
<p>Creating interactive applications using active server pages : client 
and server side script in C#, variables and constants, creating modules,
 creating objects from classes, ASP‟s object model, arrays, collections,
 control structures, using request and response objects, integration 
with database.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Raj Kamal, Internet and Web Technologies, TMH, 2005.</p>
</li>
<li><p>Monica D‟Souza, Web publishing, TMH, 2001.</p>
</li>
<li><p>David Crowder and Rhonda Crowder, Web Design, IDG Books India, 2001.</p>
</li>
<li><p>Musciano C., HTML and XHTML the Definitive Guide, 6th edition, OReilly, 2006.</p>
</li>
<li><p>Deitel H., Deitel P., Internet and World Wide Web: How to Program, 4 edition, PHI.</p>
</li>
</ol>
<h1 id="-operating-systems-"><em>OPERATING SYSTEMS</em></h1>
<h2 id="unit-i-introduction-to-operating-system">UNIT I INTRODUCTION TO OPERATING SYSTEM</h2>
<p>Importance of operating systems, basic concepts and terminology about
 operating system, memory management functions, processor management 
functions, device management functions, information management 
functions.</p>
<h2 id="unit-ii-process-management">UNIT II PROCESS MANAGEMENT</h2>
<p>Elementary concept of process, job scheduler, process scheduling, 
operation on process, threads, overview, scheduling criteria, scheduling
 algorithms, algorithm evaluation process synchronization, 
synchronization hardware, semaphores, classical problem of 
synchronization, monitors and atomic transaction deadlocks: system 
model, deadlock characterization, deadlocks prevention, deadlocks 
avoidance, deadlocks detection, recovery from deadlock.</p>
<h2 id="unit-iii-memory-management">UNIT III MEMORY MANAGEMENT</h2>
<p>Memory management, logical versus physical address space, swapping, 
contiguous allocation, paging, segmentation, demand paging, page 
replacement, page replacement algorithms, allocation of frames, 
thrashing, demand segmentation.</p>
<h2 id="unit-iv-storage-management">UNIT IV STORAGE MANAGEMENT</h2>
<p>File concept, directory structure, protection, file-system structure,
 allocation method, free-space management, directory implementation.</p>
<h2 id="unit-v-i-o-systems">UNIT V I/O SYSTEMS</h2>
<p>I/O hardware, Application of I/O interface, Overview of Kernel I/O 
subsystem, three types of I/O systems, memory based I/O, I/O based I/O, 
peripheral based I/O.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Galvin, Wiley, Operating Systems Concepts, 8<sup>th</sup> edition, 2009.</p>
</li>
<li><p>James L Peterson, Operating Systems Concept, John Wiley &amp; Sons Inc, the 6Rev edition, 2007.</p>
</li>
<li><p>Deitel H. M., An Introduction to Operating Systems, Addison-Wesley, 1990.</p>
</li>
<li><p>Stallings William, Operating Systems, PHI, New Delhi, 1997.</p>
</li>
<li><p>Madnick and Donavon, Operating Systems, McGraw Hill, International edition, 1978.</p>
</li>
<li><p>S. Tanenbaum Modern Operating Systems, , Pearson Education, 3<sup>rd</sup> edition, 2007.</p>
</li>
<li><p>Nutt, Operating System, Pearson Education, 2009.</p>
</li>
<li><p>S. Tanenbaum, Distributed Operating Systems, Prentice Hall, 2<sup>nd</sup> edition, 2007.</p>
</li>
<li><p>M. Singhal &amp; N. Shivaratri, Advanced Concepts in Operating Systems, McGraw Hill, 2003.</p>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>DATA STRUCTURES AND ALGORITHMS</strong></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Course Code:</strong>                     </td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>No. of Lectures (Hrs/Week):</strong>     </p>
<p><strong>Total No. of Lectures:</strong>          | <strong>CS205</strong></p>
</blockquote>
<pre><code class=" hljs 1c">                                    **<span class="hljs-number">3</span>**      

                                    **<span class="hljs-number">45</span>**     <span class="hljs-string">|</span>
</code></pre><h2 id="unit-i-introduction-to-data-structures">UNIT I INTRODUCTION TO DATA STRUCTURES</h2>
<p>Abstract data types, sequences as value definitions, data types in C,
 pointers in C, data structures and C, arrays in C, array as ADT, one 
dimensional array, Implementing one dimensional array, array as 
parameters, two dimensional array, structures in C, implementing 
structures, Unions in C, implementation of unions, structure parameters,
 allocation of storage and scope of variables, recursive definition and 
processes: factorial function, fibonacci sequence, recursion in C, 
efficiency of recursion, hashing: hash function, open hashing, closed 
hashing: linear probing, quadratic probing, double hashing, rehashing, 
extendible hashing.</p>
<h2 id="unit-ii-stack-queue-and-linked-list">UNIT II STACK, QUEUE AND LINKED LIST</h2>
<p>Stack definition and examples, primitive operations, example 
-representing stacks in C, push and pop operation implementation, queue 
as ADT, C Implementation of queues, insert operation, priority queue, 
array implementation of priority queue, inserting and removing nodes 
from a list-linked implementation of stack, queue and priority queue, 
other list structures, circular lists: stack and queue as circular list 
primitive operations on circular lists, header nodes, doubly linked 
lists, addition of long positive integers on circular and doubly linked 
list.</p>
<h2 id="unit-iii-trees">UNIT III TREES</h2>
<p>Binary trees: operations on binary trees, applications of binary 
trees, binary tree representation, node representation of binary trees, 
implicit array representation of binary tree, binary tree traversal in 
C, threaded binary tree, representing list as binary tree, finding the 
Kth element, deleting an element, trees and their applications: C 
representation of trees, tree traversals, evaluating an expression tree,
 constructing a tree.</p>
<h2 id="unit-iv-sorting-and-searching">UNIT IV SORTING AND SEARCHING</h2>
<p>General background of sorting: efficiency considerations, notations, 
efficiency of sorting, exchange sorts: bubble sort; quick sort; 
selection sort; binary tree sort; heap sort, heap as a priority queue, 
sorting using a heap, heap sort procedure, insertion sorts: simple 
insertion, shell sort, address calculation sort, merge sort, radix sort,
 sequential search: indexed sequential search, binary search, 
interpolation search.</p>
<h2 id="unit-v-graphs">UNIT V GRAPHS</h2>
<p>Application of graph, C representation of graphs, transitive closure,
 Warshall's algorithm, shortest path algorithm, linked representation of
 graphs, Dijkstra's algorithm, graph traversal, traversal methods for 
graphs, spanning forests, undirected graph and their traversals, depth 
first traversal, application of depth first traversal, efficiency of 
depth first traversal, breadth first traversal, minimum spanning tree, 
Kruskal's algorithm, round robin algorithm.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li>Aaron M. Tenenbaum, Yeedidyah Langsam, Moshe J. Augenstein, 'Data structures using C', Pearson Education, 2004 / PHI.</li>
</ol>
<p><strong>References Books:</strong></p>
<ol>
<li><p>E. Balagurusamy, 'Programming in Ansi C', Second Edition, TMH, 2003.</p>
</li>
<li><p>Robert L. Kruse, Bruce P. Leung Clovis L.Tondo, 'Data Structures and Program Design in C', Pearson Education, 2000 / PHI.</p>
</li>
</ol>
<h1 id="-system-analysis-and-design-"><em>SYSTEM ANALYSIS AND DESIGN</em></h1>
<h2 id="unit-i-data-and-information">UNIT I DATA AND INFORMATION</h2>
<p>Types of information: operational, tactical, strategic and statutory,
 why do we need information systems, management structure, requirements 
of information at different levels of management, functional allocation 
of management, requirements of information for various functions, 
qualities of information, small case study.</p>
<h2 id="unit-ii-systems-analysis-and-design-life-cycle">UNIT II SYSTEMS ANALYSIS AND DESIGN LIFE CYCLE</h2>
<p>Requirements determination, requirements specifications, feasibility 
analysis, final specifications, hardware and software study, system 
design, system implementation, system evaluation, system modification, 
role of systems analyst, attributes of a systems analyst, tools used in 
system analysis</p>
<h2 id="unit-iii-information-gathering">UNIT III INFORMATION GATHERING</h2>
<p>Strategies, methods, case study, documenting study, system 
requirements specification, from narratives of requirements to 
classification of requirements as strategic, tactical, operational and 
statutory.</p>
<h2 id="unit-iv-feasibility-analysis">UNIT IV FEASIBILITY ANALYSIS</h2>
<p>Deciding project goals, examining alternative solutions, cost benefit
 analysis, quantifications of costs and benefits, payback period, system
 proposal preparation for managements, parts and documentation of a 
proposal, tools for prototype creation.</p>
<h2 id="unit-v-tools-for-systems-analysts">UNIT V TOOLS FOR SYSTEMS ANALYSTS</h2>
<p>Data flow diagrams, case study for use of DFD, good conventions, 
leveling of DFDs, leveling rules, logical and physical DFDs, software 
tools to create DFDs, decision tables for complex logical 
specifications, specification oriented design vs procedure oriented 
design</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>System Analysis and Design – Elias M.Awad.</p>
</li>
<li><p>System Analysis and Design –Perry Edwards</p>
</li>
<li><p>Analysis and Design of Information Systems – James A.Senn</p>
</li>
</ol>
<h1 id="-digital-electronics-lab-"><em>DIGITAL ELECTRONICS LAB</em></h1>
<ol>
<li><p>Verify the truth table of AND Gate.</p>
</li>
<li><p>Verify the truth table of OR and NOT gates.</p>
</li>
<li><p>Verify the truth table of NAND , NOR Gates.</p>
</li>
<li><p>Verify the truth table of and EX-OR Gate.</p>
</li>
<li><p>Design a combinational circuit to realize the function f(ABC)=A(B+C) using NAND gates.</p>
</li>
<li><p>Design a half adder using NOR gates only</p>
</li>
<li><p>Design full adder</p>
</li>
<li><p>Design a given size of Mux using gates.</p>
</li>
<li><p>Verify RS and JK flip flops</p>
</li>
<li><p>Verify D and T Flip flops</p>
</li>
<li><p>Design a up/down 3-bit counter</p>
</li>
<li><p>Design a 3 bit shift register.</p>
</li>
</ol>
<h1 id="-internet-technology-lab-"><em>INTERNET TECHNOLOGY LAB</em></h1>
<h2 id="list-of-experiments">List of Experiments</h2>
<ol>
<li><p>Design a web page using XHTML which shows the Hyperlinks, List, Tables.</p>
</li>
<li><p>Design a web page in which users insert the username and password using XHTML form.</p>
</li>
<li><p>Design a web page using XHTML to insert an image and adding a marquee.</p>
</li>
<li><p>Write XML schema document for Book domain.</p>
</li>
<li><p>Design a website using HTML, XHTML and JavaScript.</p>
</li>
<li><p>Using Java Script display a line of text in a web page.</p>
</li>
<li><p>Using Java Script display a text in an alert Dialog box.</p>
</li>
<li><p>Using Java Script , take input of two integer from the user and display the result in the web page.</p>
</li>
<li><p>Using Java Script, Show the equality and relational operators.</p>
</li>
<li><p>Write a script that reads integers and determines the square root of the integer using square root method of Math object.</p>
</li>
<li><p>Write a script which uses the control statements.</p>
</li>
<li><p>Write a script that reads five integers and determines the largest and the smallest integers in the group.</p>
</li>
<li><p>Write a code to show connectivity between SQL server and ASP.net.
 14. Introduction to different types of tools using in ASP.net 
Technology.</p>
</li>
<li><p>Design a web page using ASP.net.</p>
</li>
</ol>
<h1 id="-data-structure-and-algorithms-lab-"><em>DATA STRUCTURE AND ALGORITHMS LAB</em></h1>
<h2 id="list-of-experiments">List of Experiments</h2>
<ol>
<li><p>Run time analysis of Fibonacci Series</p>
</li>
<li><p>Study and Application of various data Structure</p>
</li>
<li><p>Study and Implementation of Array Based Program</p>
<ol>
<li><p>Searching (Linear Search, Binary Search)</p>
</li>
<li><p>Sorting (Bubble, Insertion, Selection, Quick, Merge etc)</p>
</li>
<li><p>Merging</p>
</li>
</ol>
</li>
<li><p>Implementation of Link List</p>
<ol>
<li><p>Creation of Singly link list, Doubly Linked list</p>
</li>
<li><p>Concatenation of Link list</p>
</li>
<li><p>Insertion and Deletion of node in link list</p>
</li>
<li><p>Splitting the link list into two link list</p>
</li>
</ol>
</li>
<li><p>Implementation of STACK and QUEUE with the help of</p>
<ol>
<li><p>Array</p>
</li>
<li><p>Link List</p>
</li>
</ol>
</li>
<li><p>Implementation of Binary Tree, Binary Search Tree, Height Balance Tree</p>
</li>
<li><p>Write a program to simulate various traversing Technique</p>
</li>
<li><p>Representation and Implementation of Graph</p>
<ol>
<li><p>Depth First Search</p>
</li>
<li><p>Breadth First Search</p>
</li>
<li><p>Prims Algorthim</p>
</li>
<li><p>Kruskal‟s Algorithms</p>
</li>
</ol>
</li>
<li><p>Implementation of Hash Table</p>
</li>
</ol>
<h1 id="-semester-iv-">(SEMESTER - IV)</h1>
<h1 id="-numerical-methods-for-analysis-"><em>NUMERICAL METHODS FOR ANALYSIS</em></h1>
<h2 id="unit-i">UNIT-I</h2>
<p>Zeroes of transcendental and polynomials, Bisection method, 
Regula-falsi method and Newton-Raphson method, Secant Method, Rate of 
convergence of above methods.</p>
<h2 id="unit-ii">UNIT-II</h2>
<p>Interpolation, Finite differences, difference tables, Newton‟s 
forward and backward interpolation, Divided differences, Lagrange‟s and 
Newton‟s divided difference formula for unequal intervals, Error 
analysis, Least square approximation.</p>
<h2 id="unit-iii">UNIT-III</h2>
<p>Numerical differentiation, Numerical integration, Error Analysis, 
Newton-Cote quardrature formulae, Trapezoidal, Simpson‟s one third and 
three-eight rules.</p>
<h2 id="unit-iv">UNIT IV</h2>
<p>Solution of system of linear equations, (Direct and Indirect Methods)
 Gauss- Seidal method, GaussJordan Method, Crout method, 
Gauss-elimination and LU-Decomposition, successive-overrelaxation, Power
 method for largest eigenvalue, Jacobi method for real symmetric 
matrices.</p>
<h2 id="unit-v">UNIT V</h2>
<p>Numerical Solutions of ODE and PDE: Runge-Kutta and predictor 
corrector methods for IVPs. Finite difference methods for BVPs, 
Numerical solutions of parabolic and elliptic partial differential 
equations, Finite element method.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>Gerald C.F., Wheatley P.O., Applied Numerical Analysis, 6<sup>th</sup> Ed., Pearson Education, 1999.</p>
</li>
<li><p>Gupta R.S., Elements of Numerical Analysis, 1<sup>st</sup> Ed., Macmillan 2009.</p>
</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Jain M.K., Iyen S.R.K., Jain R.K.: Numerical Methods for 
Scientific and Engineering Computation 5th Ed., New Age International, 
New Delhi, 2007.</p>
</li>
<li><p>Smith G.D. : Numerical Solution of Partial Differential Equations, 2<sup>nd</sup> Ed., Oxford, 1978.</p>
</li>
</ol>
<h1 id="-principles-of-communication-"><em>PRINCIPLES OF COMMUNICATION</em></h1>
<h2 id="unit-i-linear-modulation">UNIT I LINEAR MODULATION</h2>
<p>Modulation techniques: need and types of modulation techniques, 
amplitude modulation, frequency spectrum, power distribution, generation
 and detection of AM, comparision of various AM systems, synchronous 
detection technique, error in synchronous detection, SSB signal 
detection, Frequency Division Multiplexing(FDM).</p>
<h2 id="unit-i-iangle-modulation">UNIT I IANGLE MODULATION</h2>
<p>Frequency and phase modulation, frequency spectrum, bandwidth 
requirement, frequency and phase deviation, modulation index, narrowband
 FM, wide band FM &amp; their spectrum, FM modulators: Direct (Parameter
 Variation Method) and Indirect (Armstrong) method of frequency 
modulation. FM Detector: slope detector, foster seely discriminator, 
ratio detector and PLL detectors, pre-emphasis &amp; de-emphasis, 
capture effect.</p>
<p><strong>UNIT III SAMPLING AND RECONSTRUCTION:</strong></p>
<p>Sampling of signal, sampling theorem for low pass and band pass 
signals, aliasing, Pulse Amplitude Modulation (PAM), Time Division 
Multiplexing (TDM), types of sampling, PAM, PWM and PPM, Pulse Code 
Modulation: quantization, quantization error, signal-to-noise ratio in 
PCM, companding, line coding, Differential PCM (DPCM), Delta Modulation 
(DM), Adaptive Delta Modulation (ADM), slope overload error, granular 
noise.</p>
<p><strong>UNIT IV DIGITAL MODULATION TECHNIQUES</strong> :Amplitude Shift Keying (ASK), Binary</p>
<p>Phase Shift Keying (BPSK), Differential Phase Shift Keying (DPSK), Quadrature Phase Shift Keying</p>
<p>(QPSK), M-ary PSK, Binary Frequency Shift Keying (BFSK), M-ary FSK, 
Minimum Shift Keying, Quadrature Amplitude Modulation (QAM), probability
 of error, Bit Error Rate (BER), comparison of digital modulation 
techniques on the basis of probability of error, matched filter.</p>
<p><strong>UNIT V INFORMATION THEORY AND CODING:</strong></p>
<p>Information, amount of information, unit of information, average 
information or entropy, information rate, joint and conditional entropy,
 discrete memory less channel, special channels, mutual information and 
channel capacity, mutual information and channel capacity for special 
channels, shannon‟s theorem, shannon- hartley theorem, bandwidth &amp; 
s/n trade off, source coding, code length and code efficiency, source 
coding theorem, fixed length codes, variable length codes, source coding
 techniques: Shannon Fano and Huffman coding algorithms, linear block 
codes, systematic linear blocks codes, parity check matrix, syndrome 
testing, cyclic code, hamming code, error detection and correction 
codes, convolution codes</p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>Lathi B.P., Analog and Digital Communication systems, 3/E Oxford Press, 2007</p>
</li>
<li><p>Taub &amp; Schilling, Principles of communication systems, 3/E 
McGraw Hill, 2000. 3. B. Sklar, Digital Communication, Pearson Education</p>
</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Taub &amp; Schilling, Principles of Communication system, TMH.</p>
</li>
<li><p>Singh and Sapre: Communication System, TMH</p>
</li>
<li><p>Proakis and Salehi, Fundamentals of Communication Systems, 1/E Pearson Education, 2005.</p>
</li>
<li><p>Hwei P Hsu,Analog and Digital Communication Schaum Series TMH, 2 Edition.</p>
</li>
<li><p>Tomasi: Advanced Electronics Communication Systems, 6th Edition, 
PHI 9. Couch: Digital and Analog Communication, Pearson Education</p>
</li>
</ol>
<blockquote>
<ol>
<li>Carlson, Communication Systems, 5/E McGraw Hill, 2004.</li>
</ol>
</blockquote>
<h1 id="-software-engineering-"><em>SOFTWARE ENGINEERING</em></h1>
<h2 id="unit-i-software-engineering">UNIT I SOFTWARE ENGINEERING</h2>
<p>Introduction to software engineering: definitions, role of software 
engineering, planning a software project, defining the problem, 
developing a solution strategy, planning the development process, 
software engineering process paradigms, principles of software 
engineering, software engineering activities.</p>
<h2 id="unit-ii-requirement-analysis-and-design">UNIT II REQUIREMENT ANALYSIS AND DESIGN</h2>
<p>Software Requirement Specification (SRS): Introduction, need of SRS, 
significance, characteristics of SRS, Structure of SRS, IEEE standards 
for SRS design, functional and non-functional requirements, Requirement 
gathering and analysis, requirement engineering and management.</p>
<h2 id="unit-iii-software-design-process">UNIT III SOFTWARE DESIGN PROCESS</h2>
<p>Software Design: Introduction, design process activities: 
architectural design, Abstract specification, Interface design, 
component design, data structure design, algorithm design modular 
approach, top-down design, bottom-up design, design methods: data-flow 
model: data flow diagram, entity-relation-attribute model: E-R diagram, 
structural model: structure charts, context diagrams, object models: use
 case modeling, use case diagrams, sequence diagrams, cohesion and 
coupling.</p>
<h2 id="unit-iv-software-life-cycle-models">UNIT IV SOFTWARE LIFE CYCLE MODELS</h2>
<p>Software Development Life Cycle (SDLC), SDLC models, waterfall model 
and its variations, prototype model, iterative enhancement model, spiral
 model, RAD model, comparison of these models, software development 
teams, software development environments, validation and traceability, 
maintenance, prototyping requirements, Software project management.</p>
<h2 id="unit-v-software-testing-and-maintenance">UNIT V SOFTWARE TESTING AND MAINTENANCE</h2>
<p>Testing Methods: unit testing, integration testing, system testing, 
acceptance testing, testing techniques: white box testing, black box 
testing, thread testing, regression testing, alpha testing, beta 
testing, static testing, dynamic testing, Evolution of software 
products, economics of maintenance, category of software maintenance, 
Role of product development life cycle, deployment model, adaptive 
maintenance, corrective maintenance, perfective maintenance, enhancement
 request, proactive defect prevention, problem reporting, problem 
resolution, software maintenance from customers‟ perspective, 
maintenance standard: IEEE-1219, ISO-12207.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Pankaj Jalote, An Integrated Approach to Software Engineering, Narosa Publishing House, New Delhi 1997.</p>
</li>
<li><p>Ian Sommerville, Software Engineering, Pearson Education, 2009.</p>
</li>
<li><p>Pressman Roger S., Software Engineering: Practitioner's Approach, McGraw-Hill Inc., 2004.</p>
</li>
<li><p>Software Engineering: Software Reliability, Testing and Quality 
Assurance, Nasib S. Gill, Khanna Book Publishing Co (P) Ltd., New Delhi,
 2002.</p>
</li>
</ol>
<h1 id="-discrete-structure-"><em>DISCRETE STRUCTURE</em></h1>
<h2 id="unit-i-mathematical-logic">UNIT I MATHEMATICAL LOGIC</h2>
<p>Statements and notations, connectives, well formed formulas, truth 
tables, tautology, equivalence implication, normal forms, predicates: 
predicative logic, free &amp; bound variables, rules of inference, 
consistency, proof of contradiction, automatic theorem proving.</p>
<h2 id="unit-ii-set-theory">UNIT II SET THEORY</h2>
<p>Properties of binary relations, equivalence, compatibility and 
partial ordering relations, hasse diagram. functions: inverse function 
comports of functions, recursive functions, lattice and its properties, 
pigeon hole principles and its application, algebraic structures: 
algebraic systems examples and general properties, semi groups and 
monads, groups sub groups‟ homomorphism, isomorphism.</p>
<h2 id="unit-iii-elementary-combinatorics">UNIT III ELEMENTARY COMBINATORICS</h2>
<p>Basis of counting, combinations &amp; permutations, with repetitions,
 constrained repetitions, binomial coefficients, binomial multinomial 
theorems, the principles of inclusion – exclusion.</p>
<h2 id="unit-iv-recurrence-relation">UNIT IV RECURRENCE RELATION</h2>
<p>Generating functions, function of sequences calculating coefficient 
of generating function, recurrence relations, solving recurrence 
relation by substitution and generating funds, characteristics roots 
solution of in homogeneous recurrence relation.</p>
<h2 id="unit-v-graph-theory">UNIT V GRAPH THEORY</h2>
<p>Representation of graph, DFS, BFS, spanning trees, planar graphs. 
graph theory and applications, basic concepts isomorphism and sub 
graphs, multi graphs and euler circuits, hamiltonian graphs, chromatic 
numbers</p>
<p><strong>Text Books</strong> :</p>
<ol>
<li>Discrete and Combinational Mathematics- An Applied Introduction-5th Edition – Ralph.</li>
</ol>
<p>P.Grimaldi, Pearson Education</p>
<ol>
<li>Discrete Mathematical Structures with applications to computer science Trembly J.P. &amp; Manohar</li>
</ol>
<p>.P, TMH</p>
<ol>
<li>Discrete Mathematics and its Applications, Kenneth H. Rosen, Fifth Edition.TMH.</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Discrete Mathematics with Applications, Thomas Koshy, Elsevier</p>
</li>
<li><p>Discrete Mathematical Structures, Bernand Kolman, Roberty C. Busby, Sharn Cutter Ross, Pearson Education/PHI.</p>
</li>
<li><p>Discrete Mathematical structures Theory and application-Malik &amp; Sen</p>
</li>
<li><p>Discrete Mathematics for Computer science, Garry Haggard and others, Thomson.</p>
</li>
<li><p>Discrete Mathematics for Computer Scientists &amp; Mathematicians, J.L. Mott, A. Kandel, T.P. Baker Prentice Hall.</p>
</li>
<li><p>Logic and Discrete Mathematics, Grass Man &amp; Trembley, Person Education.</p>
</li>
</ol>
<h1 id="-database-management-system-"><em>DATABASE MANAGEMENT SYSTEM</em></h1>
<h2 id="unit-i-data-base-system">UNIT I DATA BASE SYSTEM</h2>
<p>Data base system vs. file system, view of data, data abstraction, 
instances and schemas, data models, ER model, relational model, database
 languages, DDL, DML, database access for applications programs, data 
base users and administrator, transaction management, data base system 
structure, storage manager, query processor, history of data base 
systems, data base design and ER diagrams, beyond ER design entities, 
attributes and entity sets, relationships and relationship sets, 
additional features of ER model, concept design with the ER model, and 
conceptual design for large enterprises.</p>
<h2 id="unit-ii-relational-model">UNIT II RELATIONAL MODEL</h2>
<p>Introduction to the relational model, integrity constraint over 
relations, enforcing integrity constraints, querying relational data, 
and logical data base design, destroying /altering tables and views. 
relational algebra and calculus: relational algebra, selection and 
projection set operations, renaming, joins, division, relational 
calculus, tuple relational calculus, domain relational calculus, 
expressive power of algebra and calculus.</p>
<h2 id="unit-iii-basic-sql-query">UNIT III BASIC SQL QUERY</h2>
<p>Examples of basic SQL queries, nested queries, correlated nested 
queries set, comparison operators, aggregative operators, NULL values, 
comparison using null values, logical connectivity‟s, AND, OR and NOTR, 
impact on SQL constructs, outer joins, disallowing NULL values, complex 
integrity constraints in SQL triggers and active data bases.</p>
<h2 id="unit-iv-schema-refinement">UNIT IV SCHEMA REFINEMENT</h2>
<p>Problems caused by redundancy, decompositions, problem related to 
decomposition, reasoning about FDS, FIRST, SECOND, THIRD normal form, 
BCNF, forth normal form, lossless join decomposition, dependency 
preserving decomposition, schema refinement in data base design, multi 
valued dependencies.</p>
<h2 id="unit-v-overview-of-transaction-management">UNIT V OVERVIEW OF TRANSACTION MANAGEMENT</h2>
<p>ACID properties, transactions and schedules, concurrent execution of 
transaction, lock based concurrency control, performance locking, and 
transaction support in SQL, crash recovery, concurrency control, 
Serializability and recoverability, lock management, lock conversions, 
dealing with dead locks, specialized locking techniques, concurrency 
without locking, crash recovery: ARIES, log, other recovery related 
structures, the write, ahead log protocol, check pointing, recovering 
from a system crash, media recovery, other approaches and interaction 
with concurrency control.</p>
<p><strong>References Books:</strong></p>
<ol>
<li><p>Elmasri Navrate, Data Base Management System, Pearson Education, 2008.</p>
</li>
<li><p>Raghurama Krishnan, Johannes Gehrke, Data Base Management Systems, TMH, 3rd edition, 2008.</p>
</li>
<li><p>C. J. Date, Introduction to Database Systems, Pearson Education, 2009.</p>
</li>
<li><p>Silberschatz, Korth, Database System Concepts, McGraw hill, 5<sup>th</sup> edition, 2005.</p>
</li>
<li><p>Rob, Coronel &amp; Thomson, Database Systems Design: Implementation and Management, 2009.</p>
</li>
</ol>
<h1 id="-principles-of-programming-language-"><em>PRINCIPLES OF PROGRAMMING LANGUAGE</em></h1>
<h2 id="unit-i-introduction">UNIT I INTRODUCTION</h2>
<p>Characteristics of programming Languages, Factors influencing the 
evolution of programming language, developments in programming 
methodologies, desirable features and design issues. Programming 
language processors: Structure and operations of translators, software 
simulated computer, syntax, semantics, structure, virtual computers, 
binding and binding time.</p>
<h2 id="unit-ii-elementary-and-structured-data-types">UNIT II ELEMENTARY AND STRUCTURED DATA TYPES</h2>
<p>Data object variables, constants, data types, elementary data types, 
declaration, assignment and initialization, enumeration, characters, 
strings. Structured data type and objects: Specification of data 
structured types, vectors and arrays, records, variable size data 
structure, pointers and programmer constructed data structure, Sets 
files. Sub Program and programmer defined data types: Evolution of data 
types, abstractions, encapsulations, information hiding, sub programms, 
abstract data types.</p>
<h2 id="unit-iii-sequence-control">UNIT III SEQUENCE CONTROL</h2>
<p>Implicit and Explicit sequence control, sequence control with within 
expression and statements, recursive sub programmes, exception handling,
 co routines, scheduled sub programmes, concurrent execution. Data 
control referencing environments, static and dynamic scope, local data 
local data referencing environment, shared data: explicit common 
environment dynamic scope parameter passing mechanism.</p>
<h2 id="unit-iv-storage-management">UNIT IV STORAGE MANAGEMENT</h2>
<p>Major run time requirements, storage management phases, static 
storage management, stack based, heap based storage management. Syntax 
and translation: General syntactic criteria, syntactic element of a 
language, stages in translation, formal syntax and semantics.</p>
<h2 id="unit-v-operating-and-programming-environment">UNIT V OPERATING AND PROGRAMMING ENVIRONMENT</h2>
<p>Batch processing environments, embedded system requirements, 
theoretical models, introduction to functional programming, lambda 
calculus, data flow language and object oriented language, comparison in
 various general and special purpose programming languages e.g. fortran,
 C, Pascal, Lisp, etc.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Terrance W Pratt, "Programming Languages: Design and Implementation" PHI</p>
</li>
<li><p>Sebesta, "Concept of Programming Language", Addison Wesley</p>
</li>
<li><p>E Horowitz, "Programming Languages", 2nd Edition, Addison Wesley 4. "Fundamentals of Programming Languages", Galgotia</p>
</li>
</ol>
<h1 id="-software-engineering-lab-"><em>SOFTWARE ENGINEERING LAB</em></h1>
<h2 id="list-of-experiments">List of Experiments</h2>
<ol>
<li><p>Introduction and project definition.</p>
</li>
<li><p>Software process overview with configuration management tool.</p>
</li>
<li><p>Design the software requirements by using Requisite Pro.</p>
</li>
<li><p>Introduction to UML and use case diagrams with the help of Rational Rose.</p>
</li>
<li><p>System modelling and design of DFD and ER diagram.</p>
</li>
<li><p>Design of Flow of events and activity diagram by using Rational Rose.</p>
</li>
<li><p>OO analysis and discovering classes with the help of Requisite Pro.</p>
</li>
<li><p>Design the Interaction diagrams, sequence and collaboration diagrams with the help of software engineering tool.</p>
</li>
<li><p>Software architecture and object-oriented design by using Rational Rose.</p>
</li>
<li><p>Draw the traceability matrix with the help of designing the requirements and feature matrix</p>
</li>
</ol>
<h1 id="-database-management-system-lab-"><em>DATABASE MANAGEMENT SYSTEM LAB</em></h1>
<h2 id="list-of-experiments">List of Experiments</h2>
<ol>
<li><p>Introduction to MySQL, an exercise of data types in MySQL &amp; Data Definition Language Commands</p>
</li>
<li><p>Exercise on Data Manipulation Language and Transaction Control Commands</p>
</li>
<li><p>Exercise on Types of Data Constraints</p>
</li>
<li><p>Exercise on JOINS (Single-Table) Using Normalization</p>
</li>
<li><p>Exercise on JOINS (Multiple-Table) Using Normalization</p>
</li>
<li><p>Exercise on GROUP BY/ORDER BY Clause and Date Arithmetic</p>
</li>
<li><p>Exercise on different Functions (Aggregate, Math and String)</p>
</li>
<li><p>Exercise on different types of sub queries</p>
</li>
<li><p>Procedures</p>
</li>
<li><p>View</p>
</li>
<li><p>Triggers</p>
</li>
</ol>
<h1 id="-semester-v-">(SEMESTER - V)</h1>
<h1 id="-theory-of-automata-"><em>THEORY OF AUTOMATA</em></h1>
<h2 id="unit-i-automata">UNIT I AUTOMATA</h2>
<p>Introduction; alphabets, strings and languages; automata and grammars, deterministic finite automata</p>
<p>(DFA)-formal definition, simplified notation: state transition graph, transition table, language of DFA,</p>
<p>Nondeterministic finite Automata (NFA), NFA with epsilon transition, 
language of NFA, equivalence of NFA and DFA, minimization of finite 
automata, distinguishing one string from other, Myhill-Nerode Theorem</p>
<h2 id="unit-ii-regular-expressions-and-languages">UNIT II REGULAR EXPRESSIONS AND LANGUAGES</h2>
<p>Regular expression (RE), definition, operators of regular expression 
and their precedence, algebraic laws for regular expressions, Kleen‟s 
theorem, regular expression to FA, DFA to regular expression, arden 
theorem, non regular languages, pumping lemma for regular languages. 
application of pumping lemma, closure properties of regular languages, 
decision properties of regular languages, FA with output: moore and 
mealy machine, equivalence of moore and mealy machine, applications and 
limitation of FA.</p>
<h2 id="unit-iii-context-free-grammar-and-languages">UNIT III CONTEXT-FREE GRAMMAR AND LANGUAGES</h2>
<p>Context Free Grammar (CFG) and Context Free Languages (CFL): 
definition, examples, derivation, derivation trees, ambiguity in 
grammar, inherent ambiguity, ambiguous to unambiguous CFG, useless 
symbols, simplification of CFGs, normal forms for CFGs: CNF and GNF, 
closure properties of CFLs, decision properties of CFLs: emptiness, 
finiteness and membership, pumping lemma for CFLs,</p>
<h2 id="unit-iv-push-down-automata">UNIT IV PUSH DOWN AUTOMATA</h2>
<p>Push Down Automata (PDA): description and definition, instantaneous 
description, language of PDA, acceptance by final state, acceptance by 
empty stack, deterministic PDA, equivalence of PDA and CFG, CFG to PDA 
and PDA to CFG, two stack PDA</p>
<h2 id="unit-v-turing-machines-tm-">UNIT V TURING MACHINES (TM)</h2>
<p>Basic model, definition and representation, instantaneous 
description, language acceptance by TM, variants of turing machine, TM 
as computer of integer functions, universal TM, church‟s thesis 
recursive and recursively enumerable languages, halting problem, 
introduction to undecidability, undecidable problems about TMs. Post 
Correspondence Problem (PCP), modified PCP, introduction to recursive 
function theory.</p>
<p><strong>References Books:</strong></p>
<ol>
<li><p>Hopcroft, Ullman, “Introduction to Automata Theory, Languages and Computation”, Pearson Education</p>
</li>
<li><p>K.L.P. Mishra and N.Chandrasekaran, “Theory of Computer Science : Automata, Languages and Computation”, PHI</p>
</li>
<li><p>Martin J. C., “Introduction to Languages and Theory of Computations”, TMH</p>
</li>
<li><p>Papadimitrou, C. and Lewis, C.L., “Elements of the Theory of Computation”, PHI</p>
</li>
</ol>
<h1 id="-web-development-"><em>WEB DEVELOPMENT</em></h1>
<h2 id="unit-i-introduction-to-net">UNIT I INTRODUCTION TO .NET</h2>
<p>.NET, advantages of .NET, Common Language Runtime (CLR), CLR 
architecture, Just-in-time complier, Microsoft Intermediate Language, IL
 with IL Disassembler, framework, types and version of framework, common
 class library, common type system, common language specifications, 
languages under .NET.</p>
<h2 id="unit-ii-language-fundamentals">UNIT II LANGUAGE FUNDAMENTALS</h2>
<p>Basic programming rules, data types, variable declaration and initialization, using the <em>using</em> and <em>imports</em>
 keywords, literals, unicode characters and strings, operators, 
conditional statements, looping statements, arrays, structures, concept 
of class and objects, creating and using class library, creating and 
using namespaces, oops paradigm: encapsulation, abstraction, 
polymorphism, inheritance.</p>
<h2 id="unit-iii-visual-basic-programming">UNIT III VISUAL BASIC PROGRAMMING</h2>
<p>Creating interactive applications using active server pages: client 
and server side script in C#, creating modules, creating objects from 
classes, flow control and exception handling, working with windows and 
web forms, mouse event, hiding and displaying controls, button control, 
label control, TextBox control, radio button control, check box control,
 list box control, using request and response objects, integration with 
database, ADO.NET.</p>
<h2 id="unit-iv-java-server-pages-jsp-">UNIT IV JAVA SERVER PAGES (JSP)</h2>
<p>Evolution of web application, overview of Hyper Text Transfer 
Protocol, servlet, servlet life cycle, servlet classes, threading 
models, HTTP session, Java Server Pages, JSP syntax and sementics, 
expression, scriptlets and declaration, request dispatching, session and
 thread management.</p>
<h2 id="unit-v-jsp-applications-and-jdbc">UNIT V JSP APPLICATIONS AND JDBC</h2>
<p>Develop and deploy web application with JSP, JSP and XML, JSP testing and debugging, JDBC,</p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>Hanna, The Complete Reference JSP 2.0, Tata McGraw Hill, 2003.</p>
</li>
<li><p>Mike Mcgrath, Java Server Pages, Dreamtech Press, 2009.</p>
</li>
<li><p>Visual Basic 2008 Programming, Black Book, Dreamtech Press, 2009.</p>
</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>E. Balagurusawamy, Programming with JAVA, Tata McGraw Hill, 1998.</p>
</li>
<li><p>Christian Nagel, Professional C# and .NET 4, Wrox, 2010.</p>
</li>
<li><p>Karli Watson, Beginning Microsoft Visual C#, Wrox, 2010.</p>
</li>
</ol>
<h1 id="-computer-graphics-"><em>COMPUTER GRAPHICS</em></h1>
<h2 id="unit-i-introduction">UNIT I INTRODUCTION</h2>
<p>Application areas of Computer Graphics, overview of graphics systems,
 video-display devices, rasterscan systems, random scan systems, 
graphics monitors and work stations and input devices, Output primitives
 : Points and lines, line drawing algorithms, mid-point circle and 
ellipse algorithms. Filled area</p>
<p>primitives: Scan line polygon fill algorithm, boundary-fill and flood-fill algorithms</p>
<h2 id="unit-ii-2-d-geometrical-transforms">UNIT II 2-D GEOMETRICAL TRANSFORMS</h2>
<p>Translation, scaling, rotation, reflection and shear transformations,
 matrix representations and homogeneous coordinates, composite 
transforms, transformations between coordinate systems, 2-D viewing : 
The viewing pipeline, viewing coordinate reference frame, window to 
view-port coordinate transformation, viewing functions, Cohen-Sutherland
 and Cyrus-beck line clipping algorithms, Sutherland –Hodgeman polygon 
clipping algorithm</p>
<h2 id="unit-iii-representation-and-transformation">UNIT III REPRESENTATION AND TRANSFORMATION</h2>
<p>3-D object representation Polygon surfaces, quadric surfaces, spline 
representation, Hermite curve, Bezier curve and B-Spline curves, Bezier 
and B-Spline surfaces, basic illumination models, polygon rendering 
methods, 3-D Geometric transformations: Translation, rotation, scaling, 
reflection and shear transformations, composite transformations, 3-D 
viewing: Viewing pipeline, viewing coordinates, view volume and general 
projection transforms and clipping</p>
<h2 id="unit-iv-visible-surface-detection-methods">UNIT IV VISIBLE SURFACE DETECTION METHODS</h2>
<p>Classification, back-face detection, depth-buffer, scan-line, depth 
sorting, BSP-tree methods, area subdivision and octree methods.</p>
<h2 id="unit-v-computer-animation">UNIT V COMPUTER ANIMATION</h2>
<p>Design of animation sequence, general computer animation functions, 
raster animation, computer animation languages, key frame systems, 
motion specifications.</p>
<p><strong>References Books :</strong></p>
<ol>
<li><p>“Computer Graphics C version”, Donald Hearn and M.Pauline Baker, Pearson Education.</p>
</li>
<li><p>“Computer Graphics Principles &amp; practice”, second edition in C, Foley, VanDam, Feiner and Hughes, Pearson Education.</p>
</li>
</ol>
<h1 id="-analysis-and-design-of-algorithms-"><em>ANALYSIS AND DESIGN OF ALGORITHMS</em></h1>
<h2 id="unit-i-basic-concepts-of-algorithms">UNIT I BASIC CONCEPTS OF ALGORITHMS</h2>
<p>Introduction, notion of algorithm, fundamentals of algorithmic 
solving, important problem types, fundamentals of the analysis 
framework, asymptotic notations and basic efficiency classes.</p>
<h2 id="unit-ii-mathematical-aspects-and-analysis-of-algorithms">UNIT II MATHEMATICAL ASPECTS AND ANALYSIS OF ALGORITHMS</h2>
<p>Mathematical analysis of non-recursive algorithm, mathematical 
analysis of recursive algorithm, example: fibonacci numbers, empirical 
analysis of algorithms, algorithm visualization.</p>
<h2 id="unit-iii-analysis-of-sorting-and-searching-http-www-indiastudychannel-com-resources-33338-cs-design-and-analysis-of-algorithms-syllabus-aspx-algorithms">Unit III ANALYSIS OF SORTING AND <a href="http://www.indiastudychannel.com/resources/33338-CS-DESIGN-AND-ANALYSIS-OF-ALGORITHMS-Syllabus.aspx">SEARCHING</a> ALGORITHMS</h2>
<p>Brute force, selection sort and bubble sort, sequential search and 
brute-force string matching, divide and conquer, merge sort, quick sort,
 binary search, binary tree, traversal and related properties, decrease 
and conquer, insertion sort, depth first search and breadth first 
search.</p>
<h2 id="unit-iv-algorithmic-techniques">UNIT IV ALGORITHMIC TECHNIQUES</h2>
<p>Transform and conquer ,presorting, balanced search trees, avl trees, heaps and heap sort, dynamic <a href="http://www.indiastudychannel.com/resources/33338-CS-DESIGN-AND-ANALYSIS-OF-ALGORITHMS-Syllabus.aspx">programming,</a>
 Warshall‟s and Floyd‟s algorithm, optimal binary search trees, greedy 
techniques, Prim‟s algorithm, Kruskal‟s algorithm, Dijkstra‟s algorithm,
 Huffman trees.</p>
<h2 id="unit-v-algorithm-design-methods">UNIT V ALGORITHM DESIGN METHODS</h2>
<p>Backtracking, n-Queen‟s problem, Hamiltonian circuit problem, 
subset-sum problem, branch and bound, assignment problem, knapsack 
problem, traveling salesman problem.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li>Anany Levitin, “Introduction to the Design and Analysis of Algorithm”, Pearson Education Asia,</li>
</ol>
<p>2003.</p>
<p><strong>References Books:</strong></p>
<ol>
<li><p>T.H. Cormen, C.E. Leiserson, R.L. Rivest and C. Stein, “Introduction to Algorithms”, PHI Pvt. Ltd., 2001</p>
</li>
<li><p>Sara Baase and Allen Van Gelder, “Computer Algorithms - Introduction to Design and Analysis”, Pearson Education Asia, 2003.</p>
</li>
<li><p>A.V.Aho, J.E. Hopcroft and J.D.Ullman, “The Design and Analysis of <a href="http://www.indiastudychannel.com/resources/33338-CS-DESIGN-AND-ANALYSIS-OF-ALGORITHMS-Syllabus.aspx">Computer</a> Algorithms”, Pearson Education Asia, 2003.</p>
</li>
</ol>
<h1 id="-computer-organization-architecture-"><em>COMPUTER ORGANIZATION &amp; ARCHITECTURE</em></h1>
<h2 id="unit-i-computer-arithmetic-and-number-system">UNIT I COMPUTER ARITHMETIC AND NUMBER SYSTEM</h2>
<p>Number representation; number system, fixed and floating point number
 representation, arithmetic algorithms (addition, subtraction, booth 
multiplication).</p>
<h2 id="unit-ii-register-transfer-and-microoperation">UNIT II REGISTER TRANSFER AND MICROOPERATION</h2>
<p>Register transfer language, bus and memory transfers, bus 
architecture, bus arbitration, arithmetic logic, shift microoperation, 
arithmetic logic shift unit, design of fast address.</p>
<h2 id="unit-ii-processor-design">UNIT II PROCESSOR DESIGN</h2>
<p>Processor organization: general register organization, stack 
organization, addressing mode, instruction format, data transfer &amp; 
manipulations, program control, reduced instruction set computer.</p>
<h2 id="unit-iv-input-output-organization">UNIT IV INPUT-OUTPUT ORGANIZATION</h2>
<p>I/O interface, synchronous and asynchronous data transfer, strobe, 
handshaking schemes, modes of transfer, interrupts &amp; interrupt 
handling, direct memory access, input-output processor.</p>
<h2 id="unit-v-memory-organization">UNIT V MEMORY ORGANIZATION</h2>
<p>1/2</p>
<p>Memory hierarchy, main memory (RAM and ROM Chips), organization of 2d
 and 2 d, auxiliary memory, cache memory, virtual memory, memory 
management hardware.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Patterson, Computer Organisation and Design, Elsevier Pub. 2009</p>
</li>
<li><p>William Stalling, “ Computer Organization”, PHI</p>
</li>
<li><p>Vravice,Hamacher &amp; Zaky, “Computer Organization”, TMH</p>
</li>
<li><p>Mano,” Computer System Architecture”, PHI</p>
</li>
<li><p>John P Hays, “ Computer Organization”, McGraw Hill</p>
</li>
<li><p>Tannenbaum,” Structured Computer Organization‟, PHI</p>
</li>
<li><p>P Pal chaudhry, „ Computer Organization &amp; Design‟, PHI</p>
</li>
</ol>
<h1 id="-semester-vi-">(SEMESTER - VI)</h1>
<h1 id="-distributed-operating-system-"><em>DISTRIBUTED OPERATING SYSTEM</em></h1>
<h2 id="unit-i-introduction-to-distributed-systems">UNIT I INTRODUCTION TO DISTRIBUTED SYSTEMS</h2>
<p>Distributed <a href="http://www.indiastudychannel.com/resources/69043-DISTRIBUTED-OPERATING-SYSTEMS-Syllabus-Jntu-II.aspx">systems</a> : goals hardware concepts software, design, <a href="http://www.indiastudychannel.com/resources/69043-DISTRIBUTED-OPERATING-SYSTEMS-Syllabus-Jntu-II.aspx">communication</a> distributed systems: layered protocol: ATM networks client <a href="http://www.indiastudychannel.com/resources/69043-DISTRIBUTED-OPERATING-SYSTEMS-Syllabus-Jntu-II.aspx">server</a> model, remote procedure call, group communication.</p>
<h2 id="unit-ii-synchronization">UNIT II SYNCHRONIZATION</h2>
<p>Clock <a href="http://www.indiastudychannel.com/resources/69043-DISTRIBUTED-OPERATING-SYSTEMS-Syllabus-Jntu-II.aspx">synchronization,</a> mutual exclusion, election atomic transactions, dead locks, process and processors: threads, system models <a href="http://www.indiastudychannel.com/resources/69043-DISTRIBUTED-OPERATING-SYSTEMS-Syllabus-Jntu-II.aspx">processor, A</a>llocation, scheduling fault tolerance, real time distributed systems.</p>
<p><strong>UNIT III DISTRIBUTED FILE SYSTEMS</strong></p>
<p>File system design and implementation, trends in distributed file systems.</p>
<h2 id="unit-iv-shared-memory">UNIT IV SHARED MEMORY</h2>
<p>Introduction, bus based multi processors ring based multiprocessors 
switched multiprocessors - NUMA comparison of shared memory systems.</p>
<h2 id="unit-v">UNIT V</h2>
<p>consistency models, page based distributed shared memory, shared 
variable distributed shared memory, object based distributed shared 
memory.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li>Andrew S.Tanenbaum: Distributed <a href="http://www.indiastudychannel.com/resources/69043-DISTRIBUTED-OPERATING-SYSTEMS-Syllabus-Jntu-II.aspx">Operating System,</a> Prentice Hall International Inc.</li>
</ol>
<p>1995.</p>
<ol>
<li><p>A.S. Tanenbaum, Modern Operating Systems, Pearson Education Asia, 2001.</p>
</li>
<li><p>M. Singhal and N. G. Shivaratri, Advance Concepts in Operating Systems, McGraw-Hill, 1994.</p>
</li>
<li><p>J. W. S. Liu, Real-Time Systems, Pearson Education, 2000.</p>
</li>
</ol>
<h1 id="-concepts-of-artificial-intelligence-"><em>CONCEPTS OF ARTIFICIAL INTELLIGENCE</em></h1>
<h2 id="unit-i-introduction-to-artificial-intelligence">UNIT I INTRODUCTION TO ARTIFICIAL INTELLIGENCE</h2>
<p>Basic concept of artificial intelligence (AI), history of AI, AI and 
consciousness, weak and strong AI, physical symbol system hypothesis, 
comparison of computer and human skills, practical systems based on AI, 
development of logic, components of AI.</p>
<h2 id="unit-ii-problem-solving-through-ai">UNIT II PROBLEM SOLVING THROUGH AI</h2>
<p>Defining problem as state space search, analyzing the problem, 
representing the problems from AI viewpoint, production system, 
developing production rules, characteristics of production system, 
algorithm for problem solving using AI technique.</p>
<h2 id="unit-iii-search-techniques">UNIT III SEARCH TECHNIQUES</h2>
<p>Use of search in AI problem solution, blind search techniques, 
heuristic search techniques, concept of heuristic knowledge, designing 
of the heuristic function, types of heuristic search techniques: 
generate and test, best first search, problem reduction using AND – OR 
graph, local search technique, branch and bound search, memory bounded 
search technique, local beam search, properties of heuristic search 
techniques, overestimation and underestimation of heuristic function, 
hill climbing search, simulated annealing search, constraint 
satisfaction, means ends analysis.</p>
<h2 id="unit-iv-introduction-to-logic">UNIT IV INTRODUCTION TO LOGIC</h2>
<p>Introduction, propositional calculus, syntax of propositional 
calculus, semantics of propositional calculus, well formed formula, 
properties of statements, inferencing of propositional logic, predicate 
logic, syntax of predicate logic, semantics of predicate logic, 
representation of facts First Order Predicate Logic (FOPL), inferencing 
in predicate logic, concept of resolution, resolution algorithm, 
skolemization, Types of resolution, unit resolution, binary resolution.</p>
<h2 id="unit-v-prolog-and-lisp">UNIT V PROLOG and LISP</h2>
<p>Basic concept of programming languages related to artificial 
intelligence problems, concept of programming in Logic, basic prolog 
constructs, atoms, defining the rules, writing small programs in prolog,
 concept of list processing, basic LISP constructs, writing functions in
 LISP, some simple programs of LISP.</p>
<p><strong>Reference books:</strong></p>
<ol>
<li><p>Artificial Intelligence, Elanie Reich: Tata mcgraw Hill publishing house, 2008.</p>
</li>
<li><p>Artificial intelligence, Peterson, TataMcGraw Hill, 2008.</p>
</li>
<li><p>Artificial intelligence, Russel and Norvig, Pearson Printice Hall Publication, 2006.</p>
</li>
<li><p>Artificial Intelligence, Winston, PHI publication, 2006.</p>
</li>
</ol>
<h1 id="-advanced-computer-architecture-"><em>ADVANCED COMPUTER ARCHITECTURE</em></h1>
<h2 id="unit-i-introduction-to-parallel-processing">UNIT I INTRODUCTION TO PARALLEL PROCESSING</h2>
<p>Parallelism in uniprocessor system, basic uniprocessor architecture, 
parallel processing mechanism, balancing of sub system bandwidth, 
multiprogramming and time sharing, parallel computer structures, 
pipeline computers, array computers, multiprocessor systems, dataflow 
computer concept, architectural classification scheme: multiplicity of 
instruction-data streams, serial versus parallel processing, parallelism
 versus pipelining, parallel processing applications, productive 
modeling simulation, engineering design and automation.</p>
<h2 id="unit-ii-principles-of-pipelining-and-vector-processing">UNIT II PRINCIPLES OF PIPELINING AND VECTOR PROCESSING</h2>
<p>Pipelining- an overlapped parallelism, principles of linear 
pipelining, clock period, efficiency, throughput, classification of 
pipeline processors, general pipeline and reservation tables.</p>
<h2 id="unit-iii-principles-of-designing-pipeline-processors">UNIT III PRINCIPLES OF DESIGNING PIPELINE PROCESSORS</h2>
<p>Effect of branching , data buffering and bussing structures, internal
 forwarding and register tagging, hazard detection and resolution, job 
sequencing and collision prevention, reservation and latency analysis, 
collision free scheduling, state diagram, greedy cycle, pipeline 
schedule optimization, pipeline throughput, pipeline efficiency.</p>
<h2 id="unit-iv-structure-and-algorithm-for-array-processors">UNIT IV STRUCTURE AND ALGORITHM FOR ARRAY PROCESSORS</h2>
<p>SIMD array processor, SIMD computer organization, inter –PE 
communication, SIMD interconnection network, static versus dynamic 
networks, cube interconnection network, shuffle-exchange omega networks,
 parallel algorithms and SIMD matrix multiplication.</p>
<h2 id="unit-v-multiprocessor-architecture-and-scheduling">UNIT V MULTIPROCESSOR ARCHITECTURE AND SCHEDULING</h2>
<p>Functional structure, loosely coupled and tightly coupled 
multiprocessor, deterministic scheduling strategy, deterministic 
scheduling model, control flow versus data flow computer, data flow 
graphs and languages.</p>
<h2 id="reference-books">Reference Books</h2>
<ol>
<li><p>Kai Hwang, “Advanced Computer Architecture”, Tata McGrawHill Edition</p>
</li>
<li><p>Kai Hwang and Faye A. Briggs, “Computer Architecture and Parallel Processing”, McGraw-Hill International Edition</p>
</li>
<li><p><a href="http://www.google.co.in/search?tbs=bks:1&amp;tbo=p&amp;q=+inauthor:%22Richard+Y.+Kain%22">Richard Y. Kain,</a> “Advanced computer architecture: a systems design”, Prentice Hall.</p>
</li>
<li><p><a href="http://www.google.co.in/search?tbs=bks:1&amp;tbo=p&amp;q=+inauthor:%22James+M.+Feldman%22">James M. Feldman,</a> <a href="http://www.google.co.in/search?tbs=bks:1&amp;tbo=p&amp;q=+inauthor:%22Charles+T.+Retter%22">Charles T. Retter,</a> “Computer architecture: a designer's text based on a generic RISC”, McGraw-Hill</p>
</li>
<li><p><a href="http://www.google.co.in/search?tbs=bks:1&amp;tbo=p&amp;q=+inauthor:%22Jurij+%C5%A0ilc%22">Jurij Silc,</a> <a href="http://www.google.co.in/search?tbs=bks:1&amp;tbo=p&amp;q=+inauthor:%22Borut+Robi%C4%8D%22">Borut Robic,</a> <a href="http://www.google.co.in/search?tbs=bks:1&amp;tbo=p&amp;q=+inauthor:%22Theo+Ungerer%22">Theo Ungerer,</a> “Processor Architecture: From Dataflow to Superscalar and Beyond”, Springer.</p>
</li>
<li><p>Hennessy and Patterson, “Computer Architecture: A Quantitative Approach”, Elsevier.</p>
</li>
<li><p>Dezso and Sima, “Advanced Computer Architecture”, Pearson.</p>
</li>
<li><p>Quinn, “Parallel Computing: Theory &amp; Practice”, TMH.</p>
</li>
<li><p>Quinn, “Parallel Programming in C with MPI and Open MP”, TMH</p>
</li>
</ol>
<h1 id="-computer-networks-"><em>COMPUTER NETWORKS</em></h1>
<h2 id="unit-i-introduction-and-physical-layer">UNIT I INTRODUCTION AND PHYSICAL LAYER</h2>
<p>Key concepts of computer network, transmission media, network 
devices, network topology, topology design issues, types of network: 
LAN, MAN, WAN, PAN, ISDN systems and ATM network, OSIreference model, 
open system standards, characteristics of network, TCP/IP model, 
protocols and standards, encoding technique.</p>
<h2 id="unit-ii-switching-and-data-link-layer">UNIT II SWITCHING AND DATA LINK LAYER</h2>
<p>Circuit switching, packet switching, message switching, hybrid 
switching, and ATM switching, multiplexing techniques: TDMA, FDMA, WDMA,
 CDMA, data link layer: LLC &amp; MAC level protocols and design issues,
 issues IEEE 802 LAN Standards, framing, CRC, error control, flow 
control, HDLC, ALOHA and performance issues. Frames relay networks and 
performance parameters.</p>
<h2 id="unit-iii-network-layer">UNIT III NETWORK LAYER</h2>
<p>Network layer design issues, overview of IPv4 and IPv6, addressing: 
class full and classless, static and dynamic, subnet and supernet, 
autoconfiguration through DHCP, routing protocols: RIP, DVR,LSR, OSFP, 
BGP, congestion control algorithm, subnet concept, virtual LAN, ICMP, 
multicasting, mobile</p>
<p>IP.</p>
<h2 id="unit-iv-transport-layer">UNIT IV TRANSPORT LAYER</h2>
<p>Port addressing schemes, connectionless and connection oriented 
services: TCP and UDP, wireless TCP, Congestion control, queue 
management, NAT, PAT, socket format at transport level, socket interface
 and programming.</p>
<h2 id="unit-v-application-layer">UNIT V APPLICATION LAYER</h2>
<p>Client server architecture, domain name services, application 
services: HTTP, TELNET, RLOGIN, FTP, CBR, NFS, SMTP, POP, IMAP, MIME, 
voice and video over IP.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li>S. Tanenbaum, Computer Networks, 4th edition, Prentice Hall, 2008</li>
</ol>
<p><strong>References:</strong></p>
<ol>
<li><p>Data and Computer Communications, W. Stallings, 8th edition, Prentice Hall, 2007</p>
</li>
<li><p>TCP/IP Principles, Protocols and Architecture, Douglus E. Comer, Pearson Education</p>
</li>
<li><p>F. Haball ,Data Communication, Computer network &amp; open systems - Computer Networks : An Engineering approach - S. Keshav</p>
</li>
</ol>
<h1 id="-microprocessors-and-interfacing-"><em>MICROPROCESSORS AND INTERFACING</em></h1>
<h2 id="unit-i">UNIT I</h2>
<p>Introduction to 8085 microprocessor: pin diagram, architecture, 
programming model, instruction set, and classification of instruction 
set, instruction and data format, timing diagram of instructions, basic 
concept of programming, addressing modes of 8085 microprocessors.</p>
<h2 id="unit-ii">UNIT II</h2>
<p>Microprocessor 8086 architecture, BIU and EU, registers, pin diagram,
 memory addressing, clock generator 8284, buffers and latches, maximum 
and minimum modes.</p>
<h2 id="unit-iii">UNIT III</h2>
<p>Addressing Modes, Instruction set of 8086, assembly language 
programming, assemblers, procedures, macros, interrupts, 8086 based 
multiprocessor systems</p>
<h2 id="unit-iv">UNIT IV</h2>
<p>Interfacing Chips- IC 8155 (Static Ram with I/O Ports and Timer), 
8755 (EPROM with I/O Ports), 8251A (USART), 8255A (Programmable 
Peripheral Interface), 8253/8254 (Programmable Interval Timer/Counter), 
8257 (DMA Controller), 8259A (Programmable Interrupt Controller).</p>
<h2 id="unit-v">UNIT V</h2>
<p>The 8051 architecture Microprocessor and Microcontroller, Comparison 
of microprocessors and microcontrollers Microcontroller survey, 
microcontrollers of different word length, make and features, selection 
criteria for microcontroller ,8051 microcontroller hardware, I/O pins 
and internal architecture internal RAM, ROM organization, I/O port 
circuits ,connecting external memory, addressing modes, instruction set 
and assembly language programming.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>A. K. Ray : Advanced Microprocessors and Interfacing, 2<sup>nd</sup> edition,TMH</p>
</li>
<li><p>Mazidi and Mazidi: The 8051 Microcontroller and Embedded Systems, Pearson Education</p>
</li>
</ol>
<p><strong>References:</strong></p>
<ol>
<li><p>B. B. Brey: The Intel Microprocessors, Architecture, Programming and Interfacing, Pearson Education.</p>
</li>
<li><p>Liu Gibson: Microcomputer Systems: The 8086/8088 Family- Architecture, Programming and Design, PHI</p>
</li>
<li><p>D. V. Hall: Microprocessors and Interfacing, TMH.</p>
</li>
<li><p>Ayala Kenneth:- The 8051 microcontroller, Third Edition, Cengage Learning</p>
</li>
<li><p>A. V. Deshmukh: Microcontroller (Theory and Application), TMH.</p>
</li>
<li><p>Raj Kamal: Embedded Systems- Architecture, Programming and Design, TMH, New Delhi.</p>
</li>
<li><p>R S Gaonkar, Microprocessor, Architecture, Programming, and Applications with the 8085, Penram International Publication, 5/e</p>
</li>
<li><p>P.K. Ghosh and P. R. Sridhar, 0000 to 8085 Introduction to microprocessor for Engineers and Scientists, PHI, 2/e</p>
</li>
</ol>
<h1 id="-semester-vii-">(SEMESTER - VII)</h1>
<h1 id="-compiler-design-"><em>COMPILER DESIGN</em></h1>
<h2 id="unit-i-introduction-to-compiler">UNIT I INTRODUCTION TO COMPILER</h2>
<p>Introduction to compiler, phases and passes, bootstrapping, finite 
state machines and regular expressions and their applications to lexical
 analysis, optimization of DFA-based pattern matchers implementation of 
lexical analyzers, lexical-analyzer generator, LEX-compiler, formal 
grammars and their application to syntax analysis, BNF notation, 
ambiguity, YACC, syntactic specification of programming languages: 
Context free grammars, derivation and parse trees, capabilities of CFG.</p>
<h2 id="unit-ii-parsing-technique">UNIT II PARSING TECHNIQUE</h2>
<p>Parsers, shift reduce parsing, operator precedence parsing, top down 
parsing, predictive parsers Automatic construction of efficient parsers:
 LR parsers, the canonical collection of LR(0) items, constructing SLR 
parsing tables, constructing canonical LR parsing tables, constructing 
LALR parsing tables, using ambiguous grammars, an automatic parser 
generator, implementation of LR parsing tables.</p>
<h2 id="unit-iii-syntax-directed-translation">UNIT III SYNTAX-DIRECTED TRANSLATION</h2>
<p>Syntax-directed translation schemes, implementation of syntax 
directed translators, intermediate code, postfix notation, parse trees 
&amp; syntax trees, three address code, quadruple &amp; triples, 
translation of assignment statements, boolean expressions, statements 
that alter the flow of control, postfix translation, translation with a 
top down parser, more about translation: array references in arithmetic 
expressions, procedures call, declarations and case statements.</p>
<h2 id="unit-iv-symbol-tables">UNIT IV SYMBOL TABLES</h2>
<p>Data structure for symbols tables, representing scope information, 
run-time administration: implementation of simple stack allocation 
scheme, storage allocation in block structured language, Error detection
 &amp; recovery: lexical phase errors, syntactic phase errors, semantic 
errors.</p>
<h2 id="unit-v-code-generation">UNIT V CODE GENERATION</h2>
<p>Design issues<em>,</em> the target language. addresses in the target 
code, basic blocks and flow graphs, optimization of basic blocks, code 
generator. code optimization: machine-independent optimizations, loop 
optimization, DAG representation of basic blocks, value numbers and 
algebraic laws, global dataflow analysis</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Aho, Sethi &amp; Ullman, "Compilers: Principles, Techniques and Tools”, Pearson Education</p>
</li>
<li><p>V Raghvan, “ Principles of Compiler Design”, TMH</p>
</li>
<li><p>Kenneth Louden,” Compiler Construction”, Cengage Learning.</p>
</li>
<li><p>Charles Fischer and Ricard LeBlanc,” Crafting a Compiler with C”, Pearson</p>
</li>
</ol>
<h1 id="-object-oriented-analysis-"><em>OBJECT-ORIENTED ANALYSIS</em></h1>
<h2 id="unit-i-object-oriented-fundamentals">UNIT I OBJECT-ORIENTED FUNDAMENTALS</h2>
<p>Object model, classes and objects, complexity, classification, 
notation, process, pragmatics, binary and entity relationship, object 
types, object state, Object-Oriented Software Development (OOSD) life 
cycle, foundations of the object-oriented approach, concept of objects, 
object vs. classes, encapsulation, aggregation, inheritance and 
polymorphism, de-facto industry standard for general-purpose 
objectoriented modeling.</p>
<h2 id="unit-ii-object-oriented-analysis">UNIT II OBJECT-ORIENTED ANALYSIS</h2>
<p>Overview of object analysis: Shater/Mellor, Coad/Yourdon, Rumbaugh, 
Booch, usecase, conceptual model, behavior, class, analysis patterns, 
aggregation, advanced principles and strategies for objectoriented 
analysis, encapsulation and connascence, encumbrance and cohesion, type 
conformance and closed behavior.</p>
<h2 id="unit-iii-object-oriented-methods">UNIT III OBJECT-ORIENTED METHODS</h2>
<p>Unified Modeling Language (UML), diagrams, collaboration, sequence, 
class, frameworks, diagramming and notational techniques within UML, 
visual nature of UML, CASE tools, structural models in UML; through the 
use of class diagrams, component diagrams and deployment diagrams, 
behavioural models in UML; through the use of use-case models, 
state-chart diagrams and activity diagrams.</p>
<h2 id="unit-iv-object-oriented-development-methodology">UNIT IV OBJECT-ORIENTED DEVELOPMENT METHODOLOGY</h2>
<p>Managing analysis and design, evaluation testing, coding, 
maintenance, metrics, importance of development methodology, 
object-oriented processes in the context of a development life cycle, 
Rational Unified Process (RUP), RUP splits project life cycle into four 
phases: inception, elaboration, construction and transition, workflows 
and models within each phase.</p>
<h2 id="unit-v-requirement-and-analysis-modelling">UNIT V REQUIREMENT AND ANALYSIS MODELLING</h2>
<p>Requirements modeling, requirement model principle, use-case models, 
domain object models, documentation the requirements model, challenges 
and benefits of requirement modeling, agile requirement modeling, 
foundation class libraries, object-oriented databases, client/server 
computing, middleware, design vs. analysis, persistent objects, cohesion
 and coupling, analysis modeling, use-case analysis, analysis models.</p>
<p><strong>References Books:</strong></p>
<ol>
<li><p>Object-Oriented Analysis and Design, John Deacon, Pearson Education, 2009.</p>
</li>
<li><p>Object-Oriented Modeling and Design, James Rumbaugh, Michael Blaha,William Premerlani, Prentice Hall, 1991.</p>
</li>
<li><p>Object-Oriented Design, Grady Booch, 1991.</p>
</li>
<li><p>Applying UML and Patterns, Craig Larman, Addison Wesley, 2000.</p>
</li>
<li><p>The Unified Modeling Language User Guide, Grady Booch, James Rumbaugh, Ivar Jacobson, Addison-Wesley Longman, 1999.</p>
</li>
<li><p>Object Oriented System Development, Ali Bahrami, McGraw Hill International Edition, 1999.</p>
</li>
<li><p>Analysis Patterns, Fowler, Addison Wesley, 1996.</p>
</li>
<li><p>Design Patterns, Erich Gamma, Addison Wesley, 1994.</p>
</li>
<li><p>Object-Oriented Systems Analysis and Design Using UML 2/e , Simon Bennett, Steve McRobb, Ray Farmer McGraw-Hill Education 2002.</p>
</li>
</ol>
<h1 id="-formal-methods-"><em>FORMAL METHODS</em></h1>
<h2 id="unit-i-introduction">UNIT I INTRODUCTION</h2>
<blockquote>
<p>Why formal methods were developed, problems in natural language 
specifications, formal versus informal programming, advantages of formal
 methods, requirements of formal system, types, prepositional logic, 
predicate logic, relationships and functions.</p>
</blockquote>
<h2 id="unit-ii-formal-specification-style">UNIT II FORMAL SPECIFICATION STYLE</h2>
<blockquote>
<p>Model-oriented, specifications, concurrency-based specifications, example specification languages.</p>
</blockquote>
<h2 id="unit-iii-vdm">UNIT III VDM</h2>
<blockquote>
<p>Introduction to VDM, basic types, quote types, compound types, 
optional types, functions, operations, additional constructs, modules.</p>
</blockquote>
<h2 id="unit-iv-the-z-notation">UNIT IV THE Z NOTATION</h2>
<blockquote>
<p>Interchange language, user-defined identifiers, data types, basic types, compound types, schemas, additional constructs.</p>
</blockquote>
<h2 id="unit-v-formal-semantics-and-tools">UNIT V FORMAL SEMANTICS AND TOOLS</h2>
<blockquote>
<p>Operational semantics, denotationa, semantics, axiomatic semantics 
proof editors, proof analyzer, symbolic simulators, translators, test 
generation tools.</p>
</blockquote>
<p><strong>Text Books:</strong></p>
<blockquote>
<ol>
<li>Andrew Harry, “Formal Methods: Fact File VDM and Z”, John Wiley and Sons,1996.</li>
</ol>
</blockquote>
<h2 id="reference-books">Reference Books</h2>
<blockquote>
<ol>
<li>Jim Woodcock, Jim Davies, “Using Z Specification, Refinement and Proof”, Prentice Hall International, 1996.</li>
</ol>
</blockquote>
<h1 id="-software-engineering-"><strong>SOFTWARE ENGINEERING</strong></h1>
<h1 id="-electives-1-"><strong>(ELECTIVES -1)</strong></h1>
<h1 id="-software-project-management-"><em>SOFTWARE PROJECT MANAGEMENT</em></h1>
<h2 id="unit-i-introduction-to-software-project-management">UNIT I INTRODUCTION TO SOFTWARE PROJECT MANAGEMENT</h2>
<p>Scope of project management, project life cycle, software project 
planning- Step by Step planning, Introduction of project management 
activities: cost estimation, project scheduling, staffing, software 
configuration management, quality assurance, project monitoring, risk 
management, problem with software projects, roles and responsibilities 
of software project manager.</p>
<h2 id="unit-ii-project-evaluation-and-approaches">UNIT II PROJECT EVALUATION AND APPROACHES</h2>
<p>Project management and evaluation: Cost benefit analysis, payback 
period, NPV, ROI, Selection of appropriate project approach: Waterfall 
model, V-process model, prototyping, spiral model, incremental delivery,
 iterative process. Capability Maturity Model (CMM).</p>
<h2 id="unit-iii-activities-planning-and-risk-management">UNIT III ACTIVITIES PLANNING AND RISK MANAGEMENT</h2>
<p>Project scheduling, Project network diagram fundamentals, PERT 
techniques, Gantt charts, Risk assessment, planning and management, 
Resource allocation: creating critipaths, scheduling, cost schedules. 
Monitoring and controlling the projects. Introduction to Microsoft 
Project.</p>
<h2 id="unit-iv-monitoring-projects-and-contracts">UNIT IV MONITORING PROJECTS AND CONTRACTS</h2>
<p>Monitoring the progress of projects, accessing the risk of slippage, 
reporting, earned value analysis, control procedures, Managing 
Contracts: stages needed to acquire software, types of contracts 
contents of contracts and the evaluation of proposal on the basis of 
contracts.</p>
<h2 id="unit-v-project-quality-and-people-issues">UNIT V PROJECT QUALITY AND PEOPLE ISSUES</h2>
<p>People: player, team leader, software team, coordination and 
communication issues; inducting motivating teams, improving efficiency, 
Software quality and its importance defining, designing and monitoring 
the software quality.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Software Project Management, Cottrell M. and Hughes B., Tata McGraw Hill, 2006.</p>
</li>
<li><p>Software Project Management-A Real-World Guide to Success, Henry J., Addison Wesley, 2009.</p>
</li>
<li><p>Effective Software Project Management, Robert K. Wysocki, Wiley India, 2006.</p>
</li>
<li><p>Introduction to Software Project Management and Quality Assurance, Ince D., Sharp H. and Woodman M., McGraw Hill, 1993.</p>
</li>
<li><p>Project Management, Maylor H., Prentice Hall, 2003.</p>
</li>
<li><p>Success in Your Project-A Guide to Student System Development Projects, Weaver P., Prentice Hall, 2004.</p>
</li>
<li><p>Managing the Software Process, Humphrey, Watts, Addision-Wesley, 1986.</p>
</li>
<li><p>Software Engineering: A Practitioner‟s Approach, Pressman, Roger, McGraw Hill, 1997.</p>
</li>
<li><p>Software Engineering: Software Reliability, Testing and Quality 
Assurance, Nasib S. Gill, Khanna Book Publishing Co. (P) Ltd., New 
Delhi, 2002.</p>
</li>
<li><p>Fundamental of Software Engineering, Rajib Mall, Prentice Hall of India, 2003.</p>
</li>
<li><p>Software Engineering Concepts, Richard E. Fairley, Tata McGraw Hill, 1997.</p>
</li>
<li><p>An Integrated Approach to Software Engineering, Pankej Jalote, Narosa Publishing House, New Delhi 1997.</p>
</li>
<li><p>Software Engineering, Ian Sommerville, Pearson Education, 2009.</p>
</li>
</ol>
<h1 id="-object-oriented-software-engineering-"><em>OBJECT-ORIENTED SOFTWARE ENGINEERING</em></h1>
<h2 id="unit-i-object-oriented-software-engineering">UNIT I OBJECT-ORIENTED SOFTWARE ENGINEERING</h2>
<p>OOSE, object-orientation paradigm, object-oriented analysis, basic 
concepts, use cases, analysis, stereotypes and objects, analysis 
patterns, object modeling languages, object-oriented design: basic 
concepts, design stereotypes and objects, design patterns; 
object-oriented programming: basic concepts, idioms, object-oriented 
programming languages, application frameworks, object-oriented case 
tools, state transition and interaction diagrams, testing of 
object-oriented programs.</p>
<h2 id="unit-ii-advanced-object-oriented-analysis-and-design">UNIT II ADVANCED OBJECT-ORIENTED ANALYSIS AND DESIGN</h2>
<p>Frameworks and design patterns, design for reusability, advanced 
object-oriented programming techniques, design using object-oriented 
databases and distributed object architectures, design of software 
agents, project involving object-oriented analysis, design, and 
implementation.</p>
<h2 id="unit-iii-designing-software-using-patterns">UNIT III DESIGNING SOFTWARE USING PATTERNS</h2>
<p>Process of design, principles, techniques, software architecture, 
architectural patterns, abstractionoccurrence pattern, hierarchy 
pattern, player-role pattern, singleton pattern, observe pattern, 
delegation pattern, adapter pattern, facade pattern, immutable pattern, 
read only interface pattern, proxy pattern.</p>
<h2 id="unit-iv-objcet-oriented-metrics">UNIT IV OBJCET-ORIENTED METRICS</h2>
<p>Measure, metrics and indicators, software measurement, metrics for 
object-oriented software development environments, characteristic of 
object-oriented metrics, Chidamber &amp; Kemerer‟s metrics suite: 
Weighted Methods Per Class (WMC), Depth of Inheritance Tree (DIT), 
Number of Children (NOC), Coupling Between Object Classes (CBO), 
Response For a Class (RFC), Lack of Cohesion in Methods (LCOM), Lorenz 
and Kidds‟ metrics, metrics for object-oriented metrics projects: 
management process, development process, application size, staffing 
size, scheduling.</p>
<h2 id="unit-v-design-metrics-and-objcet-oriented-testing">UNIT V DESIGN METRICS AND OBJCET-ORIENTED TESTING</h2>
<p>Design metrics overview, method size, method internals, class size, 
class inheritance, method inheritance, class internals, MOOD (Metrics 
for Object-Oriented Design): Method Hiding Factor (MHF), Attribute 
Hiding Factor (AHF), Method Inheritance Factor (MIF), Attribute 
Inheritance Factor (AIF), Polymorphism Factor (PF), Coupling Factor 
(CF), object-oriented testing, test case design for objectoriented 
software, testing methods at class level: random testing of 
object-oriented class; interclass test case design: multiple class 
testing, test derived from behavior models.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Object-Oriented Software Engineering, Bernd Bruegge, Allen H. Dutoit, PHI, 2003.</p>
</li>
<li><p>Object-Oriented Software Engineering, Timothy C. Lethbridge, Robert Laganiere, TMH, 2008.</p>
</li>
<li><p>Object-Oriented Modeling and Design, J. Rumbaugh, M. Blaha, W. Premerlani, PHI, 1991.</p>
</li>
<li><p>Object-Oriented Design, Grady Booch, 1991.</p>
</li>
<li><p>Software Engineering: Practitioner‟s Approach, Pressman Roger S., TMH, 2004.</p>
</li>
<li><p>Software Engineering: Software Reliability, Testing &amp; Quality Assurance, N. S. Gill, KBP, 2002.</p>
</li>
<li><p>Fundamental of Software Engineering, Rajib Mall, Prentice Hall of India, 2003.</p>
</li>
<li><p>Software Engineering Concepts, Richard E. Fairley, Tata McGraw Hill, 1997.</p>
</li>
<li><p>An Integrated Approach to Software Engineering, Pankej Jalote, Narosa Publishing, 1997.</p>
</li>
<li><p>Software Engineering, Ian Sommerville, Pearson Education, 2009.</p>
</li>
</ol>
<h1 id="-information-security-"><em>INFORMATION SECURITY</em></h1>
<h2 id="unit-i-introduction">UNIT I INTRODUCTION</h2>
<p>Security problem in computing, threat scenarios, critical 
infrastructures, security targets and policies, security mechanisms, 
examples of applications and their different security requirements, 
multi-lateral security, privacy and data protection, computer misuse 
legislation, operating system and network security, cyber laws, , 
hacking , anti hacking solution, case studies of modern antivirus 
software, Computer Emergency Response Team (CERT) functionality, NIST, 
Introduce RFC related to security.</p>
<h2 id="unit-ii-security-models">UNIT II SECURITY MODELS</h2>
<p>Military and Civil Security, vulnerability and threat models, end-end
 security (COMSEC), link Encryption (TRANSEC), compartments, privacy, 
authentication, denial of service, no repudiation, private-key and 
public-key cryptographic algorithms: DES, RSA, SHA, encapsulation, 
encryption principles, issues in multi-level secure systems, Internet 
security models: IPv4/IPv6 encapsulation header, digital signature 
standard,</p>
<h2 id="unit-iii-security-policies-and-design-guidelines">UNIT III SECURITY POLICIES AND DESIGN GUIDELINES</h2>
<p>Policies, policy creation, regularity considerations, and privacy 
regulations, security: infrastructure and components, design guidelines,
 authentication: authorization and accounting, physical and logical 
access control, user authentication: biometric devices. open source 
software for network security quantum cryptography, Microsoft 
cryptography toolkit, cryptographic solution using java .</p>
<h2 id="unit-iv-osi-layer-security">UNIT IV OSI LAYER SECURITY</h2>
<p>Secure SNMP, secure routing interoperability: IP Security, virtual 
networks (DART net/CAIRN), transparent and opaque network services, 
source masking and hidden channels, techniques for fault detection, 
isolation and repair, secure network infrastructure services: DNS, NTP, 
SNMP, privacy Enhanced Mail (PEM), secure binding of multimedia streams,
 secure RTP, secure RSVP, mobile systems: Address Export and re-use, 
Secure Session Layer (SSL), Secure Hypertext Transfer Protocol (SHTTP), 
Time Stamping Protocol (TSP), email security, Firewall platforms, 
partitioning models and methods,</p>
<h2 id="unit-v-key-and-certificate-management">UNIT V KEY AND CERTIFICATE MANAGEMENT</h2>
<p>Secure binding of public and private values: DNS certificates, making
 and distributing key media: randomization, lifetime issues, key 
agreement protocols: STS protocol and IETF work orders, key escrow: 
clipper chip, one-time passwords: schemes based on S/KEY, PKI components
 and applications, exploiting diversity and redundancy: byzantine 
generals, time stamping and reliable ordering of events: NTP, consensus 
and agreement protocols, security in wireless networks, shared secret 
data authentication: token based/ public key based, session key 
management: blind key cryptosystems.</p>
<p><strong>Reference Books:</strong></p>
<blockquote>
<ol>
<li>Information Security, Principal and practices,Mark Merkow, Jim 
Breithaupty, Person 2007 2. Cryptography and Network Security: Theory 
and Practice, Stallings, John Wiley, 2006.</li>
</ol>
</blockquote>
<ol>
<li><p>Network Security Bible <a href="http://www.amazon.com/Eric-Cole/e/B001IQWLNY/ref=ntt_athr_dp_pel_1">Eric Cole</a> , <a href="http://www.amazon.com/Ronald-L.-Krutz/e/B001H6MOMI/ref=ntt_athr_dp_pel_2">Ronald L. Krutz,</a>Welley, 2005.</p>
</li>
<li><p>Computer Security, Gollmann, D., Wiley Edition, 1999.</p>
</li>
<li><p>Cryptography, Theory and Practice, Stinson D., CRC Press, Boca Raton, FA, 1995.</p>
</li>
<li><p>Security Engineering: A Guide to Building Dependable Distributed Systems, Anderson R., Wiley, 2<sup>nd</sup> edition, 2008.</p>
</li>
<li><p>Web Security: A Step-by-Step Reference Guide, Stein L., Addison Wesley Longman, Inc., 1998.</p>
</li>
</ol>
<h1 id="-multimedia-techniques-"><em>MULTIMEDIA TECHNIQUES</em></h1>
<h2 id="unit-i-introduction">UNIT I INTRODUCTION</h2>
<p>Introduction to multimedia, multimedia information, multimedia 
objects, multimedia in business and work, convergence of computer, 
communication and entertainment products, multimedia hardware, Memory 
&amp; storage devices, Communication devices, Multimedia software's, 
presentation tools, tools for object generations, video, sound, image 
capturing, authoring tools, card and page based authoring tools.</p>
<h2 id="unit-ii-multimedia-building-blocks">UNIT II MULTIMEDIA BUILDING BLOCKS</h2>
<p>Text, sound MIDI, digital audio, audio file formats, MIDI under windows environment audio &amp; video capture.</p>
<h2 id="unit-iii-data-compression">UNIT III DATA COMPRESSION</h2>
<p>Huffman coding, Shannon Fano algorithm, Huffman algorithms, adaptive 
Coding, arithmetic coding Higher order modeling, finite context 
modeling, dictionary based compression, sliding window compression, 
LZ77, LZW compression, compression, compression ratio loss less &amp; 
lossy compression.</p>
<h2 id="unit-iv-speech-compression-synthesis">UNIT IV SPEECH COMPRESSION &amp; SYNTHESIS</h2>
<p>Digital Audio concepts, sampling variables, loss less compression of sound, loss compression &amp; silence compression.</p>
<h2 id="unit-v-images">UNIT V IMAGES</h2>
<p>Multiple monitors, bitmaps, vector drawing, lossy graphic 
compression, image file formatting animations Images standards, JPEG 
Compression, Zig Zag coding, multimedia database, content based 
retrieval for text and images, video: video representation, colors, 
video compression, MPEG standards, MHEG standard video Streaming on net,
 video conferencing, multimedia broadcast services, indexing and 
retrieval of video database, recent development in multimedia.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Tay Vaughan “Multimedia, Making IT Work” Osborne McGraw Hill.</p>
</li>
<li><p>Buford “Multimedia Systems” Addison Wesley.</p>
</li>
<li><p>Agrawal &amp; Tiwari “Multimedia Systems” Excel.</p>
</li>
<li><p>Mark Nelson “Data Compression Book” BPB.</p>
</li>
<li><p>David Hillman “Multimedia technology and Applications” Galgotia Publications.</p>
</li>
<li><p>Rosch “Multimedia Bible” Sams Publishing.</p>
</li>
<li><p>Sleinreitz “Multimedia System” Addison Wesley.</p>
</li>
<li><p>James E Skuman “Multimedia in Action” Vikas.</p>
</li>
</ol>
<h1 id="-soft-computing-"><em>SOFT COMPUTING</em></h1>
<h2 id="unit-i-fuzzy-logic">UNIT I FUZZY LOGIC</h2>
<p>Introduction to fuzzy logic, classical and fuzzy sets, overview of 
fuzzy sets, membership function, fuzzy rule generation, operations on 
fuzzy sets: compliment, intersection, union, combinations on operations,
 aggregation operation.</p>
<h2 id="unit-ii-fuzzy-arithmetic">UNIT II FUZZY ARITHMETIC</h2>
<p>Fuzzy numbers, linguistic variables, arithmetic operations on 
intervals &amp; numbers, uncertainty based information, information and 
uncertainty, no specificity of fuzzy and crisp sets, fuzziness of fuzzy 
sets.</p>
<h2 id="unit-iii-neural-network">UNIT III NEURAL NETWORK</h2>
<p>Overview of biological neurons, computational neuron, mathematical 
model of neurons, ANN architecture, single layer and multilayer 
architectures, activation function, threshold value, self learning and 
forced learning algorithms, feed forward and feedback architectures.</p>
<h2 id="unit-iv-learning-fundamentals">UNIT IV LEARNING FUNDAMENTALS</h2>
<p>Learning paradigms, supervised and unsupervised learning, reinforced learning, ANN</p>
<p>training, algorithms perceptions, training rules, delta, back 
propagation algorithm, multilayer perception model, Hopfield networks, 
associative memories, applications of artificial neural networks,</p>
<h2 id="unit-v-genetic-algorithms">UNIT V GENETIC ALGORITHMS</h2>
<p>History of genetic algorithm, terminology of genetic algorithm, 
biological background, creation of offspring, working principles of 
genetic algorithms, fitness function, reproduction: Roulette wheel 
selection, Boltzmann selection, cross over mutation, inversion, 
deletion, and duplication, generation cycle.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Artificial Neural Networks: An introduction to ANN Theory and Practice, Peteus J. Braspenning, PHI publication, 2005.</p>
</li>
<li><p>Fuzzy Logic: A spectrum of Theoretical and Practical issues, Paul P. Wang, pearson publication 2004.</p>
</li>
<li><p>Fuzzy Sets, Fuzzy logic, and Fuzzy Systems: Selected Papers- Lotfi Asker Zadeh, George J. Kilr, Bo yuan, 2005.</p>
</li>
<li><p>Foundations of Fuzzy logic and Soft Computing: 12<sup>th</sup> International Fuzzy conference proceeding, 2005.</p>
</li>
<li><p>Neural Networks Theory, Particia Melin, Oxford University press, 2003</p>
</li>
<li><p>Neural Networks Theory and Application, Oscar Castillo, Wiley Eastern publication 2003.</p>
</li>
</ol>
<h1 id="-wireless-technologies-"><em>WIRELESS TECHNOLOGIES</em></h1>
<h2 id="unit-i-introduction">UNIT I: INTRODUCTION</h2>
<p>Introduction to networking, Reference models , Layering and protocol,
 OSI and other models, Network types, network media , Network 
topologies, Connectivity devices, Types and range of wireless 
communications, Growth of Wireless communication, Wireless technologies,
 Wireless LAN, Wireless Application Protocol.</p>
<h2 id="unit-ii-wireless-technologies-parameters">UNIT II: WIRELESS TECHNOLOGIES PARAMETERS</h2>
<p>Antennas, Narrowband and spread spectrum technology, Accessing 
channels: spread spectrum and cellular telephony, propagation, frequency
 and spectrum, signals, personal communication system, Wireless 
Application protocol, WAP architecture requirements, The WAP model.</p>
<h2 id="unit-iii-bluetooth">UNIT III: BLUETOOTH</h2>
<p>Design and principles of operation, transmitter characteristics, 
baseband characteristics, physical channel, physical links, general 
format, transmit/Receive timing, channel control, Bluetooth security, 
Link manager protocol, general operation , data packet format, service 
discovery protocol, RFcomm.</p>
<h2 id="unit-iv-cellular-telephony">UNIT IV: CELLULAR TELEPHONY</h2>
<p>History of cellular telephony, design and principles of cellular 
operation, analog cellular telephones, Digital Cellular telephones, 
digital Network, personal communication systems, third generation.</p>
<h2 id="unit-v-satellite-communications-and-gps">UNIT V: SATELLITE COMMUNICATIONS AND GPS</h2>
<p>History of satellite communication , Communicating with satellite , 
launching a satellite , escape and orbital velocity, different types of 
satellites, orbital mechanics, LEO , MEO, GEO, HEO, Design and 
principles of operation of GPS, satellite segment ,control segment, user
 segment, Differential GPS.</p>
<p><strong>Text Books:</strong> [1] Gary Rogers, John Edwards, “Introduction to Wireless Technology,” First Edition, 2008.</p>
<p><strong>REFERENCES:</strong></p>
<ol>
<li><p>T.S. Rappaport , "Wireless Communication " ,Second Edition, Pearson Education,2002</p>
</li>
<li><p>Simon Haykin; M.Moher , "Modern Wireless Communications " ,Pearson Education,2005</p>
</li>
<li><p>W.C.Y.Lee , "Wireless and Cellular Telecommunications " ,Third Edition, McGraw-hill International Edition,2006</p>
</li>
</ol>
<blockquote>
<p><strong>SOFTWARE ENGINEERING</strong></p>
</blockquote>
<h1 id="-semester-viii-">(SEMESTER - VIII)</h1>
<h1 id="-software-architecture-and-design-"><em>SOFTWARE ARCHITECTURE AND DESIGN</em></h1>
<h2 id="unit-i-software-architecture">UNIT I SOFTWARE ARCHITECTURE</h2>
<p>Foundations of software architecture, software life cycle 
architectural styles, quality attributes, architectural patterns, pipes 
and filters, layered systems, repositories, frameworks, patterns, 
methodologies, processes and process control, functional and 
non-functional properties of software architectures, heterogeneous 
architectures, virtual machine architecture, data flow architecture, 
service oriented architecture.</p>
<h2 id="unit-ii-design-fundamentals-and-methodologies">UNIT II DESIGN FUNDAMENTALS AND METHODOLOGIES</h2>
<p>Nature of design process: objectives, building modules, constructs, 
design qualities, assessing the design, design viewpoints for software, 
design strategies: top down and bottom up, organizational methods and 
design, Jackson structural programming, Jackson system development, 
models for software architecture</p>
<h2 id="unit-iii-software-architecture-design">UNIT III SOFTWARE ARCHITECTURE DESIGN</h2>
<p>Architectural design and mapping, architecture design patterns, 
module architecture view,styles of the module view type, execution 
architecture view, code architecture view, component-and-connector 
viewtype, styles of component-and-connector viewtype, allocation 
viewtype and styles, object-oriented architecture, user interface 
architecture, quantified design space, formalizing architectural 
description language, first class connectors, tools for architectural 
design: Unicon, A4; exploiting style in architectural design, 
architectural interconnection.</p>
<h2 id="unit-iv-interaction-oriented-software-architecture-and-design">UNIT IV INTERACTION ORIENTED SOFTWARE ARCHITECTURE and Design</h2>
<p>Model-View-Controller (MVC), Presentation-Abstraction-Control (PAC) 
architecture, distributed architecture: client server architecture, 
multi-tire, service-oriented architecture (SOA). Design principles, 
traditional approach to design, Structured Analysis Design Technique 
(SADT), Structures System Analysis and Design Method (SSADM), user 
interface design; human factor, human computer interaction, interface 
design guide lines, standards, object-oriented analysis and design.</p>
<h2 id="unit-v-patterns">UNIT V PATTERNS</h2>
<p>Design patterns, creational patterns, access control patterns, 
service variation patterns, service extension patterns, archetypes 
patterns, model driven architecture with archetype patterns, literate 
modeling, Customer Relationship Management (CRM) archetype pattern, 
product archetype pattern, quantity archetype pattern, rule archetype 
pattern, layering, organizing domain logic, mapping to relational 
databases, web presentation, domain logic patterns, data source 
architectural patterns, object-relational behavioral patterns, 
object-relational structural patterns, object-relational metadata 
mapping patterns, web presentation patterns, distribution patterns, 
offline concurrency patterns.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>Software Architecture Perspectives on an Emerging Discipline, M. Shaw Prentice-Hall, 1996.</p>
</li>
<li><p>Software Architecture Design: Methodology and Styles, Lixin Tao, Xiang Fu and Kai Qian, Stipes Publishing L.L.C., 2006.</p>
</li>
<li><p>Software Architecture in Practice, Len Bass, Paul Clements, Rick Kazman, Pearson Education Asia, 2003.</p>
</li>
</ol>
<p><strong>References Books:</strong></p>
<ol>
<li><p>Software Design, David Budgen, Addison-Wesley, 1994.</p>
</li>
<li><p>Software Engineering, Pressman R.S, McGraw Hill Inc., 1996.</p>
</li>
<li><p>Structured System Analysis and Design methods Application and Context, Ed Downs, Peter Clare, Jan Coe, Prentice Hall, 1998.</p>
</li>
<li><p>Design Patterns for Object-Oriented Software Development, Wolfgang Pree, Addison- Wesley, 1995.</p>
</li>
<li><p>Software Architecture Resource website.</p>
</li>
</ol>
<blockquote>
<p><a href="http://www2.umassd.edu/SECenter/SAResources.html">http://www2.umassd.edu/SECenter/SAResources.html</a>.</p>
</blockquote>
<ol>
<li><p>Essential Software Architecture, Ian Gorton Springer, 2006.</p>
</li>
<li><p>Pattern-Oriented Software Architecture, Frank Buschmann, Hans Rohnert, Kevin Henney, Douglas C. Schmidt, Wiley, 2004.</p>
</li>
</ol>
<h1 id="-open-source-software-system-"><em>OPEN SOURCE SOFTWARE SYSTEM</em></h1>
<h2 id="unit-i-open-source-software">UNIT I OPEN SOURCE SOFTWARE</h2>
<p>Open Source Software (OSS), history, philosophy and ethics of open 
source software, Pernes‟ principle, open source software development 
methodology, open source vs. closed source, open source software vs. 
free software, open source software vs. source available, Windows and 
Linux, open source development environment, methods and models, 
standards, open source standards, benefits of open standards, standard 
setting organizations and processes, project management via open source 
and open standard, OSS in egovernment.</p>
<h2 id="unit-ii-open-source-technology">UNIT II OPEN SOURCE TECHNOLOGY</h2>
<p>Open source technology and platform, Operating system: Linux, 
Berkeley Software Distribution; web server: Apache; communication 
servers: send mail, jabber; application and messaging server: JBoss, 
Zope, Zend.</p>
<h2 id="unit-iii-open-source-languages">UNIT III OPEN SOURCE LANGUAGES</h2>
<p>Ruby, Ruby and object-orientation, data, expressions and flow 
control, class, object and modules, project and libraries, developing a 
basic Ruby application, PHP, configure environment, PHP basic, 
functions, arrays, object-oriented PHP, MYSQL, PostgreSQL.</p>
<h2 id="unit-iv-open-source-software-applications-and-framework">UNIT IV OPEN SOURCE SOFTWARE APPLICATIONS AND FRAMEWORK</h2>
<p>Open source desktop applications, Wiki software, LAMP application, 
web server and database server application, OSS management tools: 
taskjuggler, dotProject.net, rapid web application development 
framework: Ruby on Rail, Model-View-Controller model, Don‟t Repeat 
Yourself principle.</p>
<h2 id="unit-v-open-source-in-the-enterprise">UNIT V OPEN SOURCE IN THE ENTERPRISE</h2>
<p>Nature of open source, leadership in open source software life cycle,
 comparison in the risks of commercial and open source software, 
measuring the maturity of open source, designing an open source 
strategy, open source licenses, comparison of open source licenses, open
 source empowerment.</p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>Paul Kavanagh, Open Source Software: Implementation and Management, Digital Press, 2004.</p>
</li>
<li><p>W. Jason Gilmore, Beginning PHP and MySQL, Apress, 2010.</p>
</li>
<li><p>Timothy Fisher, Ruby on Rail, Apress, 2009.</p>
</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Dan Woods, Open Source for the Enterprise: Managing Risks, Reaping Rewards, O'Reilly, 2005.</p>
</li>
<li><p>James Lee, Brent Ware,Open Source Web Development with LAMP, Pearson Education, 2008.</p>
</li>
<li><p>Steven Weber, The Success of Open Source, Harvard University Press, 2004.</p>
</li>
<li><p>Peter Cooper, Beginning Ruby, Apress, 2007.</p>
</li>
</ol>
<h1 id="-open-source-software-system-lab-"><em>OPEN SOURCE SOFTWARE SYSTEM LAB</em></h1>
<h3 id="experiments">Experiments</h3>
<ol>
<li><p>Study, analysis and compare various open source software according to the open source standards.</p>
</li>
<li><p>Download any open source software application written in JAVA 
with source code and modify the source code to add extra functionality.</p>
</li>
<li><p>Develop a small application with the help of database (MySQL and PostGre SQL) for any domain in JAVA technology.</p>
</li>
<li><p>Learn the working and installation of the following tools:</p>
</li>
</ol>
<blockquote>
<p>Open3, Enhydra, Jboss, Zope, Zend.</p>
</blockquote>
<ol>
<li><p>Learn the working and installation process of the following 
Operating Systems and deliver a presentation: Linux, Fedora, ubuntu, 
CentOS and Boss.</p>
</li>
<li><p>Rapid web application development framework: Ruby on Rail.</p>
</li>
<li><p>Learn the working and installation process of the following Open 
Source Software Management Tools : Taskjuggler and dotProject.net</p>
</li>
<li><p>Introduction to MySQL, an exercise on data types in MySQL &amp; Data Definition Language.</p>
</li>
<li><p>Exercise on Data Manipulation Language and transaction control commands using MySQL.</p>
</li>
<li><p>Exercise on Types of Data Constraints using MySQL.</p>
</li>
<li><p>Exercise on Joins (single-table or multi-table) and using normalization using MySQL.</p>
</li>
<li><p>Exercise on group-by clause and date arithmetic using MySQL.</p>
</li>
<li><p>Exercise on different functions (aggregate, math and string) using MySQL.</p>
</li>
<li><p>Introduction to PL/SQL, Control Structures, Procedures and Functions, View using MySQL.</p>
</li>
<li><p>Exercise on different types of sub queries using MySQL.</p>
</li>
</ol>
<h1 id="-software-engineering-"><strong>SOFTWARE ENGINEERING</strong></h1>
<h1 id="-electives-2-3-">(ELECTIVES - 2 &amp; 3)</h1>
<h1 id="-component-based-software-engineering-"><em>COMPONENT-BASED SOFTWARE ENGINEERING</em></h1>
<h2 id="unit-i-introduction-to-cbse">UNIT I INTRODUCTION TO CBSE</h2>
<p>Component-Based Software Engineering (CBSE), CBSE vs. Object-Oriented
 Software Engineering, CBSE methodology, CBSE processes, domain 
engineering, component engineering, component-based software life cycle,
 component vs. object, CBSE project management, measurement and metrics 
for CBSE, challenge CBSE, advantages and disadvantages of CBSE, 
economics of CBSE.</p>
<h2 id="unit-ii-component-oriented-programming">UNIT II COMPONENT-ORIENTED PROGRAMMING</h2>
<p>Component-oriented programming, object-oriented programming to 
component-oriented programming, component-oriented programming vs. 
object-oriented programming, principle and infrastructure of 
component-oriented programming.</p>
<h2 id="unit-iii-component-and-component-model">UNIT III COMPONENT AND COMPONENT MODEL</h2>
<p>Component, component technology, software component, specification of
 software component, component architecture, component framework, 
component interface, component abstraction, component services, 
components model, component selection, component adaptability, component
 certification, component composition, component and interface modeling,
 domain modeling, patterns and frameworks.</p>
<h2 id="unit-iv-component-based-design-and-reuse">UNIT IV COMPONENT-BASED DESIGN AND REUSE</h2>
<p>Principles of component design and reuse, design prototyping, design 
production, design refactoring, design documentation, component-based 
software reuse, reusable component, component-based reuse metrics.</p>
<h2 id="unit-v-component-technologies">UNIT V COMPONENT TECHNOLOGIES</h2>
<p>Component technologies: Component Object Model (COM), Distributed 
Component Object Model (DCOM), Common Object Requesting Broker 
Architecture (CORBA), Enterprise Java Beans (EJB).</p>
<p><strong>Text Books:</strong></p>
<ol>
<li><p>George T. Heineman, William T. Councill, Component-Based Software
 Engineering: Putting the Pieces Together, Addision Wesley, 2001.</p>
</li>
<li><p>Andy Ju An Wang, Kai Qian, Component-Oriented Programming, Willey Interscience, 2005</p>
</li>
</ol>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Clemens Szyperski, Component Software: Beyond Object-Oriented Programming, Addison Wesley, 1997.</p>
</li>
<li><p>Alan W. Brown, Component-Based Software Engineering, Wiley-IEEE Computer Society, 1996.</p>
</li>
<li><p>Sudha Sadasivam, Component-Based Technology, G. Willy, 2008.</p>
</li>
<li><p>Pressman Roger S., Software Engineering: Practitioner‟s Approach, McGraw-Hill Inc., 2004.</p>
</li>
<li><p>N. S. Gill, Software Engineering: Software Reliability, Testing 
and Quality Assurance, Khanna Book Publishing Co. (P) Ltd., New Delhi, 
2002.</p>
</li>
</ol>
<h1 id="-software-measurement-and-estimation-"><em>SOFTWARE MEASUREMENT AND ESTIMATION</em></h1>
<h2 id="unit-i-software-measurements-theory">UNIT I SOFTWARE MEASUREMENTS THEORY</h2>
<p>Fundamentals of software measurement, measurement scale, scope of 
software, need for measurement, type of measurement process, measures of
 central tendency and variability, validation, validity and reliability 
of measurement, empirical investigation, planning experiments, 
challenges of software measurement, measurement models, data collection,
 analysis methods, statistical methods, measurement life cycle.</p>
<h2 id="unit-ii-measuring-software-system">UNIT II MEASURING SOFTWARE SYSTEM</h2>
<p>Measuring size of software, physical measurement of software, 
measuring functionality, measuring complexity, structural complexity, 
conceptual complexity, estimating efforts.</p>
<h2 id="unit-iii-measurement-and-metrics">UNIT III MEASUREMENT AND METRICS</h2>
<p>Software metrics, Design metrics: method size, method internals, 
class size, class inheritance, method inheritance, class internals, 
class externals; software quality metrics: product quality, process 
quality, metrics for software, maintenance; metrics for reliability 
prediction, measuring the costs of defect removal, evaluating defect 
prevention methods, Rayleigh Model, Problem Tracking Report (PTR) model,
 reliability growth model, model evaluation, orthogonal defect 
classification, case studies of metrics programs.</p>
<h2 id="unit-iv-software-quality-models-and-reliability">UNIT IV SOFTWARE QUALITY MODELS AND RELIABILITY</h2>
<p>Software quality models: Boehm's model, McCall's model, ISO 9126 
model, Basic software quality metrics, Quality management models, 
Measuring customer satisfaction , Software Quality Assurance (SQA), 
Defects, Faults vs. failures, Defect Projection Techniques and Models, 
Software Reliability Measurement and Prediction, The Cost of 
Reliability, Software Reliability Theory, reliability models, failure 
arrival rate, response time, response time measurements, availability 
measuring progress, case studies of software quality.</p>
<h2 id="unit-v-software-cost-estimation">UNIT V SOFTWARE COST ESTIMATION</h2>
<p>Software estimation methodologies and models, combining estimates, 
estimating Issues, software cost factors, cost estimation, software cost
 estimation techniques, staffing-level estimation, estimating software 
maintenance costs, Cost estimation Constructive Cost Model (COCOMO), 
Function Point (FP) model, Common Software Measurement International 
Consortium (COSMICS), Full Function point (FFP) approach, software 
estimation crisis, case studies</p>
<p><strong>References Books:</strong></p>
<ol>
<li><p>Software Measurement and Estimation: A Practical Approach, Linda M. Laird, M. Carol Brennan, Willy, 2006.</p>
</li>
<li><p>Software Metrics, N. E. Fentar and S. L. Pflieger, International Thomson Computer Press, 1997.</p>
</li>
<li><p>Metric and Models in Software Quality Engineering, Stephen H. Kin, Addision Wesley, 1995.</p>
</li>
<li><p>Measuring Software Process, William A. Florac and Areitor D. Carletow, Addison - Wesley, 1995.</p>
</li>
<li><p>Estimating Software Costs: Bringing Realism to Estimating, Capers Jones, Tata M. Hill, 2007.</p>
</li>
<li><p>Applied Software Measurement: Global Analysis of Productivity and Quality, Capers Jones, Tata McGRAW Hill, 2008.</p>
</li>
</ol>
<h1 id="-software-re-engineering-"><em>SOFTWARE RE-ENGINEERING</em></h1>
<h2 id="unit-i-introduction-to-re-engineering">UNIT I INTRODUCTION TO RE-ENGINEERING</h2>
<p>Re-engineering concept and approaches, growing problems and 
maintaining software, redevelopment vs reengineering, reengineering 
process and methods, Reengineering economics, BPR process, Lehman‟s law,
 Pitfalls of reengineering, Technology for reengineering.</p>
<h2 id="unit-ii-reverse-engineering">UNIT II REVERSE ENGINEERING</h2>
<p>Function abstraction, data abstraction, Process abstraction, levels 
of reverse engineering: redocumentation, design recovery, specification 
recovery, conditions for reverse engineering, supporting techniques: 
forward engineering, restructuring, re-engineering, benefits of reverse 
engineering.</p>
<h2 id="unit-iii-source-code-translation-and-data-reengineering">UNIT III SOURCE CODE TRANSLATION AND DATA REENGINEERING</h2>
<p>Need of source code translation: hardware platform update, 
organizational policy change, lack of software support, understandable 
software code, testing and maintainable, detection of duplicate code. 
Data reengineering and Migration, Documentation.</p>
<h2 id="unit-iv-hybrid-re-engineering">UNIT IV HYBRID RE-ENGINEERING</h2>
<p>Hybrid re-engineering tracks: translation of existing code, 
Commercial of the Shelf (COTS), custom code, hybrid re-engineering 
approach, risks of hybrid re-engineering: schedule, functionality, cost,
 quality, interface and interoperability, and benefits of hybrid 
re-engineering.</p>
<h2 id="unit-v-software-re-engineering-patterns-and-techniques">UNIT V SOFTWARE RE-ENGINEERING PATTERNS AND TECHNIQUES</h2>
<p>Software re-engineering patterns, patterns based software 
re-engineering, object-oriented re-engineering patterns &amp; technique,
 design patterns, testing patterns, software re-engineering techniques: 
restructuring, refactoring and data re-engineering, forward 
re-engineering, Clean room approach, tools support for reengineering.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Software Re-engineering, Robert S. Arnold, IEEE Computer Society Press, 1993.</p>
</li>
<li><p>Reversing: Secrets of Reverse Engineering, Eldad Eilam, John Wiley and Sons, 2005.</p>
</li>
<li><p>Software Engineering, James F. Peters, Witold Pedrycz, Willey, 2008.</p>
</li>
<li><p>Object-Oriented Reengineering Patterns, Serge Demeyer, Morgan Kaufmann, 2003.</p>
</li>
<li><p>Introduction to Software Engineering, Ronald Leach, CRC, 1999.</p>
</li>
<li><p>Component-Based Software Engineering: Alan W. Brown, Wiley-IEEE Computer Society, 1996.</p>
</li>
<li><p>Software Engineering: A Practitioner‟s Approach, Pressman, Roger, McGraw Hill, 1997.</p>
</li>
</ol>
<h1 id="-software-reusability-"><em>SOFTWARE REUSABILITY</em></h1>
<h2 id="unit-i-reusability">UNIT I REUSABILITY</h2>
<p>Motivation for reuse, reuse data element, reuse requirements, reuse 
activities, reuse design, reuse source code, reuse interface, reuse 
development plan, reuse test plan, reuse test case, reuse driven 
organizations, design patterns, generators based reuse, application 
framework, managing a reuse project, characteristics of reuse project, 
adapting a project to reuse, reuse tools, cost effective techniques for 
reuse, compositionbased and generation-based reuse techniques.</p>
<h2 id="unit-ii-applications-and-component-system">UNIT II APPLICATIONS AND COMPONENT SYSTEM</h2>
<p>Reuse object-oriented software engineering model, component 
applications, facades control access to component systems, facades and 
component systems, components specialization for reuse, variability and 
its mechanism, reuse of variable components to build application 
systems.</p>
<h2 id="unit-iii-object-components">UNIT III OBJECT COMPONENTS</h2>
<p>Object models, reusing analysis and design components, expressing 
variability in object model components, subsystem components group 
related classes, reusable design and implementation, components 
packaging and documenting object components. Reuse development 
processes, develop for reuse, develop with reuse, testing of reusable 
components, object-oriented components techniques and life cycles, 
object-oriented development for reuse, detailed design for reuse, 
implementation for reuse, Verification and Validation.</p>
<h2 id="unit-iv-comoponent-system-engineering">UNIT IV COMOPONENT SYSTEM ENGINEERING</h2>
<p>Building flexible component systems, analyzing requirements focusing 
on variability, performing robustness analysis, designing and testing 
the component system, packaging of component system for reuse, 
principles of component design and reuse, design prototyping, 
Component-Based Software Reuse (CBSR), component develop for reuse, 
develop with reuse, testing of reusable component, reuse metrics, 
challenges in CBSR.</p>
<h2 id="unit-v-application-system-engineering">UNIT V APPLICATION SYSTEM ENGINEERING</h2>
<p>Application system reuse, building application systems from reusable 
components, analyzing requirements, performing robustness analysis for 
flexible application systems, designing, implementing, testing the 
application system, packaging application system.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Software Reuse: Architecture, Process and Organization for 
Business Success, Ivar Jacobson, Martin Griss, Patrik Jonsson, Pearson 
Education, 2009.</p>
</li>
<li><p>Software Reuse: A Hoilstic Approach, Even-Andre Karisson, John Wiley and Sons, 1996.</p>
</li>
<li><p>Software Reuse Techniques: Additional Reuse to the Systems Development Process, Karma McClure, Prentice Hall, 1997.</p>
</li>
<li><p>Software Reusability, Wilhelm Schafer, Ruben Prieto-Diaz, Masao Matsumoto, Prentice Hall, 1993.</p>
</li>
<li><p>Component-Based Software Engineering: Alan W. Brown, Wiley-IEEE Computer Society, 1996.</p>
</li>
</ol>
<h1 id="-web-based-software-engineering-"><em>WEB-BASED SOFTWARE ENGINEERING</em></h1>
<h2 id="unit-i">UNIT I</h2>
<p>Introduction, analysis, architectural design, design patterns, 
formulation, interface design, navigation, design, project, management, 
quality, attributes, structures, testing, WebApp, attributes, WebApp 
categories, WebE process, WebE team.</p>
<h2 id="unit-ii">UNIT II</h2>
<p>Attributes of web based applications, quality attributes, 
technologies, web application quality, the web process, framework for 
the web, web process model</p>
<h2 id="unit-iii">UNIT III</h2>
<p>Formulating and analyzing web based system, design for web based 
applications, testing web based applications, management issue, project 
management.</p>
<h2 id="unit-iv">UNIT IV</h2>
<p>Reviews general architectures for web application and 
technology-aware application designs, discusses the concepts and 
techniques for engineering and evaluating user interfaces appropriate 
for a web application‟s intended audience.</p>
<h2 id="unit-v">UNIT V</h2>
<p>Explores the interaction between users and the application‟s user 
interface, special attention will be paid to web technologies and 
standards available for audiences with special needs.</p>
<p>Related research papers reading as suggested by subject Teacher and their analysis.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Web Engineering: A Practitioner's Approach by Pressman and Lowe which considers the Web engineering process in its entirety.</p>
</li>
<li><p>Web Engineering: Principles and Techniques [Paperback] by Woojong Suh</p>
</li>
<li><p>Roger Pressman.S., " Software Engineering : A Practitioner's Approach ", (3rd Edition), McGraw</p>
</li>
</ol>
<p>Hill,</p>
<h1 id="-software-agents-"><em>SOFTWARE AGENTS</em></h1>
<h2 id="unit-i-software-agents-paradiagm">UNIT I SOFTWARE AGENTS PARADIAGM</h2>
<p>Software agent, history, theoretical foundations for software agents,
 agent programming, agent programming paradigms, agent vs. object, 
aglet, mobile agents, agent frameworks, agent reasoning, agent 
applications.</p>
<h2 id="unit-ii-agent-typology">UNIT II AGENT TYPOLOGY</h2>
<p>Software agents: collaborative agents, interface agents, mobile 
agents, information agents, reactive agents, hybrid agents, 
heterogeneous agent system, smart agents.</p>
<h2 id="unit-iii-multiagent-systems">UNIT III MULTIAGENT SYSTEMS</h2>
<p>Multiagent system, interaction between agents, reactive agents, 
cognitive agents, interaction protocols, agent coordination, agent 
negotiation, agent cooperation, agent organization, self- interested 
agents in ecommerce applications.</p>
<h2 id="unit-iv-intelligent-software-agents">UNIT IV INTELLIGENT SOFTWARE AGENTS</h2>
<p>Design and implementation of intelligent agents: reactive, 
deliberative, planning, interface agents, agent communication languages,
 agent knowledge representation, agent adaptability, mobile agent 
applications, languages &amp; tools for design, implementation of 
intelligent agents.</p>
<h2 id="unit-v-agents-and-security">UNIT V AGENTS AND SECURITY</h2>
<p>Agent security issues, mobile agents security, protecting agents 
against malicious hosts, untrusted agent, black box security, 
authentication for agents, security issues for aglets.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Constructing Intelligent Agents with JAVA, Bigus &amp; Bigus, Wiley, 1997.</p>
</li>
<li><p>Software Agents, Bradshaw, MIT Press, 2000.</p>
</li>
<li><p>Artificial Intelligence: A Modern Approach, von Stuart J. Russell, Peter Norvig, Prentice Hall, 1994.</p>
</li>
<li><p>Intelligent Software Agents, Richard Murch, Tony Johnson, Prentice Hall, 2000.</p>
</li>
</ol>
<p><strong>SOFTWARE ENGINEERING</strong></p>
<h1 id="-semester-ix-">(SEMESTER - IX)</h1>
<h1 id="-software-testing-"><em>SOFTWARE TESTING</em></h1>
<h2 id="unit-i-software-testing">UNIT I SOFTWARE TESTING</h2>
<p>Essentials of software testing, testing methodology, testing and 
debugging, software and hardware testing, verification and validation, 
correctness vs. reliability, challenges in software testing, software 
testing life cycle (STLC), flow graphs and path testing, transaction 
flow testing, data flow testing, database testing, web-based testing.</p>
<h2 id="unit-ii-software-testing-techniques">UNIT II SOFTWARE TESTING TECHNIQUES</h2>
<p>testing levels: unit testing, integration testing, system testing, 
acceptance testing, testing techniques: white box testing, black box 
testing; thread testing, regression testing, alpha testing, beta 
testing, static testing, dynamic testing, performance testing, ad hoc 
testing, smoke testing,exhaustive testing, structural testing, mutation 
testing; Testing Maturity Model (TMM), verification process, defect 
tracking, severity and priority, defects, fault, failure, bug, bug life 
cycle, bug report and bug reporting tools.</p>
<h2 id="unit-iii-test-metrics-and-measurement">UNIT III TEST METRICS AND MEASUREMENT</h2>
<p>Purpose of test plan, test plan design, test script, test cases, test
 management, test case specification, executing test cases, test result 
analysis. Metrics and measurement, project metrics: effort variance , 
schedule variance, effort distribution across phases, progress metrics: 
test defect metrics, development defect metrics, productivity metrics, 
defect density, defect leakage ratio, Residual Defect Density (RDD), 
test phase effectiveness, test reports.</p>
<h2 id="unit-iv-software-verification-and-validation">UNIT IV SOFTWARE VERIFICATION AND VALIDATION</h2>
<p>Verification, methods of verification, types of review on the basis 
of stage, reviews in testing life cycle, coverage in verification, 
concerns of verification, validation, coverage in validation, management
 of Verification and Validation (V &amp; V), software development V 
&amp; V activities.</p>
<h2 id="unit-v-software-testing-tools">UNIT V SOFTWARE TESTING TOOLS</h2>
<p>Manual vs. automated testing, functionality and regression testing 
tool: Win Runner ; load and performance testing tool: Load Runner; web 
based application testing tool: Quick Test Professional (QTP); Rational 
Seed Tool for requirement analysis to testing and project management.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Effective Methods for Software Testing, William E. Perry, John Wiley and Sons, 2002.</p>
</li>
<li><p>Effective Software Testing: 50 Specific Ways to Improve Your Testing, Dustin, Pearson Education, 2002.</p>
</li>
<li><p>An Integrated Approach to Software Engineering, Pankej Jalote, Narosa Publishing House, New Delhi 1997.</p>
</li>
<li><p>The Art of Software Testing, Glenford J.Myers, John Wiley &amp; Sons, 1979.</p>
</li>
<li><p>Software Testing: A Craftman's Approach, P. C. Jorgensen, CRC Press, 1995.</p>
</li>
<li><p>Software Testing Techniques, Boris Beizer, Dreamtech, 2006.</p>
</li>
<li><p>Software Testing: Principles and Practices, Srinivasan Desikan, Gopalaswamy Ramesh, Pearson Education, 2008.</p>
</li>
<li><p>Software Testing, Aditya P. Mathur, Pearson Education, 2008.</p>
</li>
<li><p>Software Testing: Principle, Techniques and Tools, M. G. Limaye, Tata McGraw Hill, 2009.</p>
</li>
</ol>
<h1 id="-research-techniques-in-ict-"><em>RESEARCH TECHNIQUES IN ICT</em></h1>
<h2 id="unit-i-introduction-to-research-techniques">UNIT I INTRODUCTION TO RESEARCH TECHNIQUES</h2>
<p>Meaning of research, objectives of research, motivation in research, 
types of research (Introduction to experimental test bed, algorithmic 
research, simulation research, mathematical modeling approach), 
characteristics and prerequisites of research, significance of research,
 research process, sources of research problem, criteria of identifying 
the problem, necessity of defining the problem, errors in selecting 
research problem, technique involved in defining the problem, report and
 paper writing.</p>
<h2 id="unit-ii-data-analysis-and-statistical-techniques">UNIT II DATA ANALYSIS AND STATISTICAL TECHNIQUES</h2>
<p>Data and their analyses, quantitative methods and techniques, Measure
 of central tendency, measures of variation, frequency distribution, 
analysis of variance, methods, Correlation analysis, regression 
analysis, time series and forecasting, introduction to discriminant 
analysis, factor analysis, cluster analysis, conjoint analysis, 
probability distribution, binomial distribution, poisson distribution, 
uniform distribution, exponential distribution, and normal distribution,
 sampling methods, test of hypothesis.</p>
<h2 id="unit-iii-mathematicam-modeling">UNIT III MATHEMATICAM MODELING</h2>
<blockquote>
<p>Steps of modeling, operations research models like queuing theory, 
stochastic processes, application of models, conceptual framework 
development and validation techniques, optimization techniques.</p>
</blockquote>
<h2 id="unit-iv-algorithmic-research">UNIT IV ALGORITHMIC RESEARCH</h2>
<p>Algorithmic research problems, types of algorithmic research, types 
of solution procedure, steps of development of algorithm, steps of 
algorithmic research, design of experiments,</p>
<h2 id="unit-v-simulation-and-soft-computing-techniques">UNIT V SIMULATION AND SOFT COMPUTING TECHNIQUES</h2>
<p>Introduction to soft computing, artificial neural network, genetic 
algorithm, fuzzy logic and their applications, tools of soft computing, 
need for simulation, types of simulation, simulation language, fitting 
the problem to simulation study, simulation models, output analysis, 
data simulation packages like MATLAB, NS2, ANSYS, Cadence.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Research Methodologies, R. Panneerselvam, Prentice Hall, 2007.</p>
</li>
<li><p>Research in Education, Best John V. and James V Kahn, Wiley eastern, 2005.</p>
</li>
<li><p>Elements of Educational Research, Sukhia, S.P., P.V. Mehrotra, and R.N. Mehrotra, PHI publication, 2003.</p>
</li>
<li><p>Methodology of Research Education, K. Setia, IEEE publication, 2004.</p>
</li>
<li><p>Research methodology, Methods and Techniques, Kothari, C.R., 2000.</p>
</li>
</ol>
<h1 id="-software-testing-lab-"><em>SOFTWARE TESTING LAB</em></h1>
<p><strong>Programs/Experiments List:</strong></p>
<ol>
<li><p>Introduction to various phases of SDLC Implementation.</p>
</li>
<li><p>Create the Requirement and Design document using IEEE format.</p>
</li>
<li><p>Design and Manage the Test Plan using Rational Test Manager.</p>
</li>
<li><p>Write a program to design the Test Plan.</p>
</li>
<li><p>Write a program to calculate the Cyclomatic Complexity.</p>
</li>
<li><p>Design Test Cases using Rational Test Manager.</p>
</li>
<li><p>Develop and Execute Manual Test.</p>
</li>
<li><p>Implement Data-Driven Testing.</p>
</li>
<li><p>Create and modify various types of Verification points.</p>
</li>
<li><p>Determine Test Results and list out the Test Case Distribution Report.</p>
</li>
</ol>
<p><strong>SOFTWARE ENGINEERING</strong></p>
<h1 id="-electives-4-5-">(ELECTIVES - 4 &amp; 5)</h1>
<h1 id="-aspect-oriented-software-engineering-"><em>ASPECT-ORIENTED SOFTWARE ENGINEERING</em></h1>
<h2 id="unit-i-aspect-oriented-software-engineering">UNIT I ASPECT-ORIENTED SOFTWARE ENGINEERING</h2>
<p>Software engineering with aspects, aspect-oriented software 
evolution, aspects, aspect vs. object, aspect vs. component, join points
 and pointcuts, separation of concerns, crosscutting concerns, problems 
caused by scattering and tangling.</p>
<h2 id="unit-ii-aspect-oriented-programming">UNIT II ASPECT-ORIENTED PROGRAMMING</h2>
<p>Concepts of AOP, inter-type declarations, implementation, comparison 
to other programming paradigms, nature of aspect-orientation, concepts 
and terminology, Join Point Model, AspectJ Point Model, pointcut 
designators, inter-type declarations, aspect weaving, comparison with 
object-oriented programming.</p>
<h2 id="unit-iii-aspect-oriented-requirement-engineering">UNIT III ASPECT-ORIENTED REQUIREMENT ENGINEERING</h2>
<p>Aspect-oriented requirements engineering and process, aspect-oriented
 requirements notations, aspectoriented requirements tool support, 
adoption and integration of aspect-oriented requirements engineering, 
and assessment/evaluation of aspect-oriented requirements.</p>
<h2 id="unit-iv-aspect-oriented-software-architecture">UNIT IV ASPECT-ORIENTED SOFTWARE ARCHITECTURE</h2>
<p>Aspect-oriented software architecture and process, aspect-oriented 
architecture notations, aspect-oriented architecture tool support, 
adoption and integration of aspect-oriented architecture, and 
assessment/evaluation of aspect-oriented architecture.</p>
<h2 id="unit-v-aspect-oriented-modeling-and-design">UNIT V ASPECT-ORIENTED MODELING AND DESIGN</h2>
<p>Aspect-Oriented Modeling, AOM approach, aspect model, aspect-oriented
 design, aspect-oriented design process, aspect-oriented design 
notations, aspect-oriented design tool support, aspect-oriented design, 
AspectJ, Aspect Werkz, Hyper/J, Java Aspect Component.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Aspect-Oriented Software Development, Robert E. Filman, Tzilla 
Elrad, Siobhán Clarke, Mehmet Aksit, Addison-Wesley Professional, 2004.</p>
</li>
<li><p>Aspect-Oriented Software Development with Use Cases, Ivar Jacobson, Addison-Wesley Object Technology Series, 2005.</p>
</li>
<li><p>Aspect-Oriented Analysis and Design: The Theme Approach, Siobhán Clarke, Addison-Wesley Object Technology Series, 2005.</p>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>SOFTWARE RELIABILITY AND FAULT TOLERANT SYSTEMS</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Course Code:</strong>                                      </td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>No. of Lectures (Hrs/Week):</strong>                      </p>
<p><strong>Total No. of Lectures:</strong>                           |</p>
</blockquote>
<h2 id="unit-i-software-reliability">UNIT I SOFTWARE RELIABILITY</h2>
<p>Measures of software reliability, Mean Time To Failure (MTTF), Mean 
Time Between Failure (MTBF), Mean Time To Recovery (MTTR), availability,
 maintainability, Musa's operational profiles and type-1 uncertainty, 
defect removal and type-2 uncertainty, reliability stability and 
reliability growth, hardware reliability vs. software reliability, 
failure probability density function and reliability function, 
Reliability prediction , reliability metrics.</p>
<h2 id="unit-ii-development-of-reliable-software">UNIT II DEVELOPMENT OF RELIABLE SOFTWARE</h2>
<p>Reliable software, defect prevention, detection and removal, design 
for robustness, verification &amp; validation, stabilization of 
requirements, design, code and test artifacts, active and passive fault 
detection, fault handling and correction, exceptions, survivability, 
reliability models, software availability model.</p>
<h2 id="unit-iii-fault-tolerance-in-hardware-systems">UNIT III FAULT TOLERANCE IN HARDWARE SYSTEMS</h2>
<p>Fault classification, fault tolerance attributes and system 
structure, fault prevention, anticipated and unanticipated fault, test 
generation for digital systems, combinational logic network, Boolean 
difference method, test generation for sequential circuits, fault 
simulation, application of hardware fault tolerance in developing fault 
tolerant software systems.</p>
<h2 id="unit-iv-software-and-hardware-fault-tolerance">UNIT IV SOFTWARE AND HARDWARE FAULT TOLERANCE</h2>
<p>Software and hardware faults, failure intensity function, 
characterization of fault injection, detection and correction, 
techniques for prediction of remaining faults and fault injection, 
classification tree analysis, code coverage, coding technique, fault 
tolerant &amp; self checking, fail safe circuits, synchronous and 
asynchronous fail safe circuits.</p>
<h2 id="unit-v-fault-tolerant-software">UNIT V FAULT TOLERANT SOFTWARE</h2>
<p>Concept of N-version programming (NVP) and methods, recovery block, 
acceptance tests, fault trees, validation of fault tolerant systems, 
security, fault tolerance in wireless/mobile networks and Internet.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Software Reliability Engineering, John D. Musa, Tata McGRAW Hill, 2005.</p>
</li>
<li><p>Fault-Tolerant Computer System Design, D.K. Pradhan, 2003.</p>
</li>
<li><p>Design and Analysis of Fault-Tolerant Digital Systems, B. W. Johnson, Addison-Wesley, 1989.</p>
</li>
<li><p>Fault-Tolerant Computing, Theory &amp; Techniques, D.K. Pradhan, Prentice Hall, 1986.</p>
</li>
<li><p>Reliable Computer Systems: Design and Evaluation, D. P. Siewiorek and R. S. Swartz, Digital Press, 1992.</p>
</li>
<li><p>Probability and Statistics with Reliability, Queueing and Computer Science application, K.S.Trivedi, Prentice Hall, 1982.</p>
</li>
<li><p>Fault Tolerant Principles and Practice, Anderson and Lee, PHI, 1989.</p>
</li>
</ol>
<h1 id="-software-quality-assurance-and-engineering-"><em>SOFTWARE QUALITY ASSURANCE AND ENGINEERING</em></h1>
<h2 id="unit-i-software-quality-and-engineering">UNIT I SOFTWARE QUALITY AND ENGINEERING</h2>
<p>Quality concepts and productivity relationship, software quality 
factors, software quality costs, Total Quality Management (TQM), 
continuous improvement cycle: Plan, Do, Check and Act (PDCA), quality 
policy, cost of quality, quality engineering, quality planning: goal 
setting and strategy formation, assessment and improvement.</p>
<h2 id="unit-ii-software-quality-assurance-sqa-">UNIT II SOFTWARE QUALITY ASSURANCE (SQA)</h2>
<p>Components of SQA, classification, defect detection, defect 
prevention, defect reduction, defect containment, QA activities in 
software processes, verification and validation, software review, 
inspection, formal verification, statistical software quality approach.</p>
<h2 id="unit-iii-components-measurement-with-reference-to-sqa">UNIT III COMPONENTS MEASUREMENT WITH REFERENCE TO SQA</h2>
<p>Metrics, product quality metrics, process quality metrics, metrics 
for software maintenance, quality tools for quality control, test 
management and organizational structures, Capability Maturity Model 
(CMM), Capability Maturity Model Integration (CMMI), ISO 9000, quality 
and quality management metrics, Deming‟s Principle, SQA team formation</p>
<h2 id="unit-iv-quality-management-model">UNIT IV QUALITY MANAGEMENT MODEL</h2>
<p>Integrating quality activities in project life cycle, reviews, 
software testing, strategies and implementation, Computer-Aided Software
 Engineering (CASE) tools, The Rayleigh model framework, code 
integration pattern, Problem Tracking Report (PTR), reliability growth 
model, Service Quality, Kano Model, Customer retention, continuous 
process improvement, Juran‟s Trilogy, TQM principles, Kaizen Technique, 
Statistical Quality Assurance, Mc call quality factors</p>
<h2 id="unit-v-software-quality-assurance-beyond-testing">UNIT V SOFTWARE QUALITY ASSURANCE BEYOND TESTING</h2>
<p>Defect prevention and process improvement, root cause analysis for 
defect prevention, software inspection, inspection related activities, 
fault tolerance and failure containment, comparing quality assurance 
techniques and activities.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Metrics and Models in Software Quality Engineering, Stephan H. Kan, Pearson Education, 2007.</p>
</li>
<li><p>An Integrated Approach to Software Engineering, Pankej Jalote, Narosa Publishing House, New Delhi 1997.</p>
</li>
<li><p>Making Sense of Software Quality Assurance, Raghav J. Nandyal, Tata McGRAW Hill, 2007.</p>
</li>
<li><p>Software Quality Assurance: A Practitioner Approach, Kaman Malik, Praveen Chaudhary, Tata McGRAW Hill, 2008.</p>
</li>
</ol>
<h1 id="-software-maintenance-"><em>SOFTWARE MAINTENANCE</em></h1>
<h2 id="unit-i-introduction-to-software-maintenance">UNIT I INTRODUCTION TO SOFTWARE MAINTENANCE</h2>
<p>Evolution of software products, economics of maintenance, 
characteristics of software maintenance, product development life cycle,
 different type of software products, deployment model, adaptive 
maintenance, enhancement request, proactive defect prevention, 
maintenance process, problem reporting, problem resolution, fix 
distribution, software maintenance from customers‟ perspective, category
 of software maintenance.</p>
<h2 id="unit-ii-reverse-engineering">UNIT II REVERSE ENGINEERING</h2>
<p>Function abstraction, data abstraction, and process abstraction, 
levels of reverse engineering: redocumentation, design recovery, 
specification recovery, conditions for reverse engineering, supporting 
techniques: forward engineering, restructuring, re-engineering, benefits
 of reverse engineering.</p>
<h2 id="unit-iii-configuration-management">UNIT III CONFIGURATION MANAGEMENT</h2>
<p>Software configuration management process, patches, configuration 
management in global development teams, baseline, software configuration
 items, identification of objects in software configuration, version 
control, change control, configuration audit, status reporting, software
 configuration management standards, metrics for maintenance in 
configuration management. traditional process model: Code and</p>
<p>Fix Model, Waterfall Model, Spiral Model; maintenance process model: 
Quick Fix Model, Boehm‟s Model, Osbornes‟ Model, Iterative Enhancement 
Model; process maturity model: Capability Maturity Model (CMM), 
Capability Maturity Model Integration (CMMI).</p>
<h2 id="unit-iv-maintenance-and-other-life-cycle-activities">UNIT IV MAINTENANCE AND OTHER LIFE CYCLE ACTIVITIES</h2>
<p>Design and maintenance, programming &amp; maintenance, debugging and 
maintenance, testing and maintenance, maintenance management, 
maintenance management functions: planning, organizing, staffing, 
leading, controlling; maintenance management organizations: functional 
organization, project organization, matrix organization.</p>
<h2 id="unit-v-maintenance-measures">UNIT V MAINTENANCE MEASURES</h2>
<p>Importance of integrity in measurement, software measure and metrics,
 objective of software measurement: evaluation, control, assessment, 
improvement, prediction, maintenance measures: size, complexity; 
quality: product and process quality, understandability and 
maintainability, impact analysis in creating maintainable system.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Software Maintenance: Concept and Practice, Penny Grubb, Aramstrong A. Takang, International Thompson Publishing Inc., 1996.</p>
</li>
<li><p>Software Maintenance, Gopalaswamy Ramesh, Ramesh Bhattiprolu, Tata McGraw Hill, 2009.</p>
</li>
<li><p>Software Engineering: Software Reliability, Testing and Quality 
Assurance, Nasib S. Gill, Khanna Book Publishing Co (P) Ltd., New Delhi,
 2002.</p>
</li>
<li><p>Software Engineering: Practitioner's Approach, Pressman Roger S., McGraw-Hill Inc., 2004.</p>
</li>
<li><p>Software Quality Engineering: Testing, Quality Assurance, and 
Quantifiable Improvement, Jeff Tian, John Wiley and Sons Inc., and IEEE 
Computer Society Press, 2005.</p>
</li>
<li><p>Software Quality Assurance, Daniel Gain, Pearson Education, 2009.</p>
</li>
</ol>
<h1 id="-software-performance-"><em>SOFTWARE PERFORMANCE</em></h1>
<h2 id="unit-i-software-performance">UNIT I SOFTWARE PERFORMANCE</h2>
<p>Software and performance, repository and scalability, importance of 
performance, consequences and cause of performance failure, reactive and
 proactive performance management, software performance Engineering 
(SPE), modeling strategy and models, SPE for object-oriented system.</p>
<h2 id="unit-ii-software-performance-engineering-process">UNIT II SOFTWARE PERFORMANCE ENGINEERING PROCESS</h2>
<p>SPE Process for object oriented system, performance solutions, principles, patterns, implementation solutions,</p>
<h2 id="unit-iii-software-execution-models">UNIT III SOFTWARE EXECUTION MODELS</h2>
<p>Software Execution Models (SEM), representing of SEM, execution 
graphs and graph restrictions, model solution, basic solution 
algorithms, analysis procedure, execution graph from sequence diagrams.</p>
<h2 id="unit-iv-system-execution-models">UNIT IV SYSTEM EXECUTION MODELS</h2>
<p>System Execution Models, system model basics, performance metrics, 
system models for SPE, advanced system models, Schedulability.</p>
<h2 id="unit-v-software-performance-engineering">UNIT V SOFTWARE PERFORMANCE ENGINEERING</h2>
<p>SPE Data Collection, SPE data requirement, key performance scenarios,
 performance objectives, execution environment software resource 
requirements, data gathering issues, performance walkthrough, resource 
estimation techniques.</p>
<p><strong>Reference Books:</strong></p>
<ol>
<li><p>Performance Solution : A Practical Guide to Creating Responsive, Scalable Software, AddisonWesley Professional.</p>
</li>
<li><p>Performance prototyping: a simulation methodology for software performance engineering, <a href="http://ieeexplore.ieee.org/xpls/abs/_all.jsp?arnumber=218462&amp;tag=1">http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=218462&amp;tag=1</a></p>
</li>
</ol>
</div></body></html>